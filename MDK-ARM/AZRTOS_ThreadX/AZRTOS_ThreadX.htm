<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [AZRTOS_ThreadX\AZRTOS_ThreadX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image AZRTOS_ThreadX\AZRTOS_ThreadX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Mon Dec 20 14:33:14 2021
<BR><P>
<H3>Maximum Stack Usage =       1196 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_gx_display_driver_24xrgb_png_draw &rArr; _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[101]">__user_initial_stackheap</a>
 <LI><a href="#[259]">_tx_initialize_low_level</a>
 <LI><a href="#[ed]">__tx_BadHandler</a>
 <LI><a href="#[ee]">__tx_HardfaultHandler</a>
 <LI><a href="#[ef]">__tx_SVCallHandler</a>
 <LI><a href="#[289]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[28a]">__tx_SysTickHandler</a>
 <LI><a href="#[f1]">__tx_NMIHandler</a>
 <LI><a href="#[f2]">__tx_DBGHandler</a>
 <LI><a href="#[25b]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[28b]">__tx_PendSVHandler</a>
 <LI><a href="#[28c]">tx_thread_fpu_disable</a>
 <LI><a href="#[28d]">tx_thread_fpu_enable</a>
 <LI><a href="#[25e]">_tx_thread_stack_build</a>
 <LI><a href="#[f0]">_tx_timer_interrupt</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[262]">gx_studio_nested_widget_create</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[262]">gx_studio_nested_widget_create</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[21a]">_gx_window_root_find</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21a]">_gx_window_root_find</a><BR>
 <LI><a href="#[207]">_gx_system_view_split</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[206]">_gx_system_root_view_add</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">GX_Task</a> from gx_task.o(.text.GX_Task) referenced 2 times from gx_task.o(.text.GX_TaskCreate)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">IDLETASK</a> from idle.o(.text.IDLETASK) referenced 2 times from idle.o(.text.IDLETaskCreate)
 <LI><a href="#[6c]">LEDTASK</a> from ledtask.o(.text.LEDTASK) referenced 2 times from ledtask.o(.text.LEDTaskCreate)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6d]">SYSTASK</a> from systask.o(.text.SYSTASK) referenced 2 times from systask.o(.text.SYSTaskCreate)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6e]">UARTTASK</a> from uart.o(.text.UARTTASK) referenced 2 times from uart.o(.text.UART1TaskCreate)
 <LI><a href="#[6a]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[6f]">_gx_animation_drag_event_process</a> from gx_animation_drag_event_process.o(.text._gx_animation_drag_event_process) referenced 2 times from gx_animation_drag_enable.o(.text._gx_animation_drag_enable)
 <LI><a href="#[71]">_gx_button_deselect</a> from gx_button_deselect.o(.text._gx_button_deselect) referenced 2 times from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[72]">_gx_button_draw</a> from gx_button_draw.o(.text._gx_button_draw) referenced 2 times from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[73]">_gx_button_event_process</a> from gx_button_event_process.o(.text._gx_button_event_process) referenced 2 times from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[70]">_gx_button_select</a> from gx_button_select.o(.text._gx_button_select) referenced 2 times from gx_button_create.o(.text._gx_button_create)
 <LI><a href="#[98]">_gx_display_driver_24xrgb_canvas_blend</a> from gx_display_driver_24xrgb_canvas_blend.o(.text._gx_display_driver_24xrgb_canvas_blend) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[9e]">_gx_display_driver_24xrgb_jpeg_draw</a> from gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_jpeg_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[74]">_gx_display_driver_24xrgb_mcu_draw</a> from gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_mcu_draw) referenced 2 times from gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_jpeg_draw)
 <LI><a href="#[9f]">_gx_display_driver_24xrgb_png_draw</a> from gx_display_driver_24xrgb_png_draw.o(.text._gx_display_driver_24xrgb_png_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7e]">_gx_display_driver_32argb_native_color_get</a> from gx_display_driver_32argb_native_color_get.o(.text._gx_display_driver_32argb_native_color_get) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[99]">_gx_display_driver_32argb_pixel_blend</a> from gx_display_driver_32argb_pixel_blend.o(.text._gx_display_driver_32argb_pixel_blend) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[9a]">_gx_display_driver_32argb_pixelmap_blend</a> from gx_display_driver_32argb_pixelmap_blend.o(.text._gx_display_driver_32argb_pixelmap_blend) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[80]">_gx_display_driver_32argb_pixelmap_draw</a> from gx_display_driver_32argb_pixelmap_draw.o(.text._gx_display_driver_32argb_pixelmap_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7d]">_gx_display_driver_32bpp_block_move</a> from gx_display_driver_32bpp_block_move.o(.text._gx_display_driver_32bpp_block_move) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[75]">_gx_display_driver_32bpp_canvas_copy</a> from gx_display_driver_32bpp_canvas_copy.o(.text._gx_display_driver_32bpp_canvas_copy) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[9d]">_gx_display_driver_32bpp_glyph_1bit_draw</a> from gx_display_driver_32bpp_glyph_1bit_draw.o(.text._gx_display_driver_32bpp_glyph_1bit_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[77]">_gx_display_driver_32bpp_horizontal_line_draw</a> from gx_display_driver_32bpp_horizontal_line_draw.o(.text._gx_display_driver_32bpp_horizontal_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[79]">_gx_display_driver_32bpp_horizontal_pattern_line_draw</a> from gx_display_driver_32bpp_horizontal_pattern_line_draw.o(.text._gx_display_driver_32bpp_horizontal_pattern_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7b]">_gx_display_driver_32bpp_horizontal_pixelmap_line_draw</a> from gx_display_driver_32bpp_horizontal_pixelmap_line_draw.o(.text._gx_display_driver_32bpp_horizontal_pixelmap_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7c]">_gx_display_driver_32bpp_pixel_write</a> from gx_display_driver_32bpp_pixel_write.o(.text._gx_display_driver_32bpp_pixel_write) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[81]">_gx_display_driver_32bpp_pixelmap_rotate</a> from gx_display_driver_32bpp_pixelmap_rotate.o(.text._gx_display_driver_32bpp_pixelmap_rotate) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7f]">_gx_display_driver_32bpp_row_pitch_get</a> from gx_display_driver_32bpp_row_pitch_get.o(.text._gx_display_driver_32bpp_row_pitch_get) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[76]">_gx_display_driver_32bpp_simple_line_draw</a> from gx_display_driver_32bpp_simple_line_draw.o(.text._gx_display_driver_32bpp_simple_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[78]">_gx_display_driver_32bpp_vertical_line_draw</a> from gx_display_driver_32bpp_vertical_line_draw.o(.text._gx_display_driver_32bpp_vertical_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[7a]">_gx_display_driver_32bpp_vertical_pattern_line_draw</a> from gx_display_driver_32bpp_vertical_pattern_line_draw.o(.text._gx_display_driver_32bpp_vertical_pattern_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[90]">_gx_display_driver_generic_aliased_arc_draw</a> from gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[88]">_gx_display_driver_generic_aliased_circle_draw</a> from gx_display_driver_generic_aliased_circle_draw.o(.text._gx_display_driver_generic_aliased_circle_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8b]">_gx_display_driver_generic_aliased_ellipse_draw</a> from gx_display_driver_generic_aliased_ellipse_draw.o(.text._gx_display_driver_generic_aliased_ellipse_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[86]">_gx_display_driver_generic_aliased_line_draw</a> from gx_display_driver_generic_aliased_line_draw.o(.text._gx_display_driver_generic_aliased_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[93]">_gx_display_driver_generic_aliased_wide_arc_draw</a> from gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_aliased_wide_arc_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[96]">_gx_display_driver_generic_aliased_wide_circle_draw</a> from gx_display_driver_generic_aliased_wide_circle_draw.o(.text._gx_display_driver_generic_aliased_wide_circle_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8f]">_gx_display_driver_generic_aliased_wide_ellipse_draw</a> from gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text._gx_display_driver_generic_aliased_wide_ellipse_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[87]">_gx_display_driver_generic_aliased_wide_line_draw</a> from gx_display_driver_generic_aliased_wide_line_draw.o(.text._gx_display_driver_generic_aliased_wide_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[82]">_gx_display_driver_generic_alphamap_draw</a> from gx_display_driver_generic_alphamap_draw.o(.text._gx_display_driver_generic_alphamap_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[91]">_gx_display_driver_generic_arc_draw</a> from gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[97]">_gx_display_driver_generic_arc_fill</a> from gx_display_driver_generic_arc_fill.o(.text._gx_display_driver_generic_arc_fill) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[89]">_gx_display_driver_generic_circle_draw</a> from gx_display_driver_generic_circle_draw.o(.text._gx_display_driver_generic_circle_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[95]">_gx_display_driver_generic_circle_fill</a> from gx_display_driver_generic_circle_fill.o(.text._gx_display_driver_generic_circle_fill) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8c]">_gx_display_driver_generic_ellipse_draw</a> from gx_display_driver_generic_ellipse_draw.o(.text._gx_display_driver_generic_ellipse_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8e]">_gx_display_driver_generic_ellipse_fill</a> from gx_display_driver_generic_ellipse_fill.o(.text._gx_display_driver_generic_ellipse_fill) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[9c]">_gx_display_driver_generic_glyph_4bit_draw</a> from gx_display_driver_generic_glyph_4bpp_draw.o(.text._gx_display_driver_generic_glyph_4bit_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[9b]">_gx_display_driver_generic_glyph_8bit_draw</a> from gx_display_driver_generic_glyph_8bpp_draw.o(.text._gx_display_driver_generic_glyph_8bit_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8a]">_gx_display_driver_generic_pie_fill</a> from gx_display_driver_generic_pie_fill.o(.text._gx_display_driver_generic_pie_fill) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[84]">_gx_display_driver_generic_polygon_draw</a> from gx_display_driver_generic_polygon_draw.o(.text._gx_display_driver_generic_polygon_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[85]">_gx_display_driver_generic_polygon_fill</a> from gx_display_driver_generic_polygon_fill.o(.text._gx_display_driver_generic_polygon_fill) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[83]">_gx_display_driver_generic_simple_wide_line_draw</a> from gx_display_driver_generic_simple_wide_line_draw.o(.text._gx_display_driver_generic_simple_wide_line_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[94]">_gx_display_driver_generic_wide_arc_draw</a> from gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_wide_arc_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[92]">_gx_display_driver_generic_wide_circle_draw</a> from gx_display_driver_generic_wide_circle_draw.o(.text._gx_display_driver_generic_wide_circle_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[8d]">_gx_display_driver_generic_wide_ellipse_draw</a> from gx_display_driver_generic_wide_ellipse_draw.o(.text._gx_display_driver_generic_wide_ellipse_draw) referenced 2 times from gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
 <LI><a href="#[a8]">_gx_image_reader_1555xrgb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[c1]">_gx_image_reader_1555xrgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[c6]">_gx_image_reader_1555xrgb_rle_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_rle_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b0]">_gx_image_reader_16bit_gray_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_alpha_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[af]">_gx_image_reader_16bit_gray_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[a3]">_gx_image_reader_1bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[a5]">_gx_image_reader_1bpp_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[b7]">_gx_image_reader_1bpp_transparent_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_transparent_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[b2]">_gx_image_reader_24bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_24bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[b9]">_gx_image_reader_24xrgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_24xrgb_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ac]">_gx_image_reader_2bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_2bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[a4]">_gx_image_reader_32argb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32argb_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[c0]">_gx_image_reader_32argb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_32argb_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b1]">_gx_image_reader_32bit_gray_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_gray_alpha_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[b3]">_gx_image_reader_32bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[aa]">_gx_image_reader_4444argb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4444argb_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[bf]">_gx_image_reader_4444argb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[c5]">_gx_image_reader_4444argb_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_transparent_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b4]">_gx_image_reader_48bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_48bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[a7]">_gx_image_reader_4bit_grayscale_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[bd]">_gx_image_reader_4bit_grayscale_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[a6]">_gx_image_reader_4bit_grayscale_transparent_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[bc]">_gx_image_reader_4bit_grayscale_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ad]">_gx_image_reader_4bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[a9]">_gx_image_reader_565rgb_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_565rgb_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[c3]">_gx_image_reader_565rgb_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[c2]">_gx_image_reader_565rgb_rle_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rle_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b8]">_gx_image_reader_565rgb_rotated_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rotated_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b5]">_gx_image_reader_64bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_64bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[ab]">_gx_image_reader_8bit_alpha_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_alpha_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[c4]">_gx_image_reader_8bit_alpha_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_alpha_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[b6]">_gx_image_reader_8bit_palette_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_palette_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[be]">_gx_image_reader_8bit_palette_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_palette_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ae]">_gx_image_reader_8bit_pixel_read</a> from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_pixel_read) referenced 2 times from gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
 <LI><a href="#[bb]">_gx_image_reader_monochrome_pixel_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_pixel_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[ba]">_gx_image_reader_monochrome_transparent_write</a> from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_transparent_write) referenced 2 times from gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
 <LI><a href="#[a1]">_gx_image_reader_one_row_convert</a> from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_convert) referenced 2 times from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
 <LI><a href="#[a2]">_gx_image_reader_one_row_dither</a> from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_dither) referenced 2 times from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
 <LI><a href="#[a0]">_gx_image_reader_one_row_rotated_convert</a> from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_rotated_convert) referenced 2 times from gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
 <LI><a href="#[c7]">_gx_pixelmap_button_draw</a> from gx_pixelmap_button_draw.o(.text._gx_pixelmap_button_draw) referenced 2 times from gx_pixelmap_button_create.o(.text._gx_pixelmap_button_create)
 <LI><a href="#[c8]">_gx_pixelmap_button_event_process</a> from gx_pixelmap_button_event_process.o(.text._gx_pixelmap_button_event_process) referenced 2 times from gx_pixelmap_button_create.o(.text._gx_pixelmap_button_create)
 <LI><a href="#[ca]">_gx_system_thread_entry</a> from gx_system_thread_entry.o(.text._gx_system_thread_entry) referenced 2 times from gx_system_initialize.o(.text._gx_system_initialize)
 <LI><a href="#[c9]">_gx_system_timer_expiration</a> from gx_system_timer_expiration.o(.text._gx_system_timer_expiration) referenced 2 times from gx_system_initialize.o(.text._gx_system_initialize)
 <LI><a href="#[cc]">_gx_widget_draw</a> from gx_widget_draw.o(.text._gx_widget_draw) referenced 2 times from gx_widget_create.o(.text._gx_widget_create)
 <LI><a href="#[cb]">_gx_widget_event_process</a> from gx_widget_event_process.o(.text._gx_widget_event_process) referenced 2 times from gx_widget_create.o(.text._gx_widget_create)
 <LI><a href="#[cd]">_gx_window_draw</a> from gx_window_draw.o(.text._gx_window_draw) referenced 2 times from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[ce]">_gx_window_event_process</a> from gx_window_event_process.o(.text._gx_window_event_process) referenced 2 times from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[d0]">_gx_window_root_event_process</a> from gx_window_root_event_process.o(.text._gx_window_root_event_process) referenced 2 times from gx_window_root_create.o(.text._gx_window_root_create)
 <LI><a href="#[cf]">_gx_window_scroll_info_get</a> from gx_window_scroll_info_get.o(.text._gx_window_scroll_info_get) referenced 2 times from gx_window_create.o(.text._gx_window_create)
 <LI><a href="#[d1]">_tx_block_pool_cleanup</a> from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup) referenced 2 times from tx_block_allocate.o(.text._tx_block_allocate)
 <LI><a href="#[d1]">_tx_block_pool_cleanup</a> from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup) referenced 2 times from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup)
 <LI><a href="#[d2]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_allocate.o(.text._tx_byte_allocate)
 <LI><a href="#[d2]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[d3]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
 <LI><a href="#[d3]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[d4]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced 2 times from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[d5]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_cleanup.o(.text._tx_queue_cleanup)
 <LI><a href="#[d5]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_receive.o(.text._tx_queue_receive)
 <LI><a href="#[d5]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_send.o(.text._tx_queue_send)
 <LI><a href="#[d7]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[d6]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[d8]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced 4 times from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_10_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_11_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_1_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_2_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_3_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_4_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_5_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_6_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_7_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_8_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_9_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_1_pixelmap_button_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_1_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_2_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_3_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_4_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_5_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_6_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_7_define)
 <LI><a href="#[db]">gx_studio_pixelmap_button_create</a> from guiapp_specifications.o(.text.gx_studio_pixelmap_button_create) referenced from guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_define)
 <LI><a href="#[da]">gx_studio_window_create</a> from guiapp_specifications.o(.text.gx_studio_window_create) referenced from guiapp_specifications.o(.rodata.window_1_define)
 <LI><a href="#[da]">gx_studio_window_create</a> from guiapp_specifications.o(.text.gx_studio_window_create) referenced from guiapp_specifications.o(.rodata.window_2_define)
 <LI><a href="#[da]">gx_studio_window_create</a> from guiapp_specifications.o(.text.gx_studio_window_create) referenced from guiapp_specifications.o(.rodata.window_define)
 <LI><a href="#[66]">memory_allocate</a> from gx_task.o(.text.memory_allocate) referenced 2 times from gx_task.o(.text.GX_Task)
 <LI><a href="#[67]">memory_free</a> from gx_task.o(.text.memory_free) referenced 2 times from gx_task.o(.text.GX_Task)
 <LI><a href="#[dc]">slide_win_event_process</a> from gx_task.o(.text.slide_win_event_process) referenced from guiapp_specifications.o(.rodata.window_define)
 <LI><a href="#[d9]">stm32f4_24xrgb_buffer_toggle</a> from f429_gx_drive.o(.text.stm32f4_24xrgb_buffer_toggle) referenced 2 times from f429_gx_drive.o(.text.stm32f4_graphics_driver_setup_24xrgb)
 <LI><a href="#[68]">stm32f4_graphics_driver_setup_24xrgb</a> from f429_gx_drive.o(.text.stm32f4_graphics_driver_setup_24xrgb) referenced 2 times from gx_task.o(.text.GX_Task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[df]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[265]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[266]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[267]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[268]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[269]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[e5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[26a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[26b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[26c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[26d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[26e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[26f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[270]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[271]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[272]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[273]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[274]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[275]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[276]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[277]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[278]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[279]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[27b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[27d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ea]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[27e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[27f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[280]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[281]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[282]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[283]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[284]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[de]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[285]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[286]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[e6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[287]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[102]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[288]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[eb]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[259]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[ed]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[ee]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[ef]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[289]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28a]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[f2]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[25b]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28b]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[f0]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[28e]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_one_row_dither
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[f5]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[28f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[f7]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[290]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_24xrgb_buffer_toggle
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_canvas_copy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_block_move
</UL>

<P><STRONG><a name="[294]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f9]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[295]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_colorspace_convert
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_write_callback_set
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_allocate
</UL>

<P><STRONG><a name="[ff]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[fc]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_create
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_create
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_circle_draw
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_one_row_dither
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[261]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
</UL>

<P><STRONG><a name="[299]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[e8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[29c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[29e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12c]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[135]"></a>FMC_SDRAM_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[103]"></a>FMC_SDRAM_SendCommand</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[136]"></a>FMC_SDRAM_Timing_Init</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f4xx_ll_fmc.o(.text.FMC_SDRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FMC_SDRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[105]"></a>GT9XX_ReadReg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touch_480x272.o(.text.GT9XX_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GT9XX_ReadReg &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[69]"></a>GX_Task</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, gx_task.o(.text.GX_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = GX_Task &rArr; gx_studio_display_configure &rArr; _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_show
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_attach
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_memory_allocator_set
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_initialize
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_drag_enable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_create
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDrive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_task.o(.text.GX_TaskCreate)
</UL>
<P><STRONG><a name="[117]"></a>GX_TaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, gx_task.o(.text.GX_TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = GX_TaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[263]"></a>HAL_DMA2D_ConfigLayer</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f4xx_hal_dma2d.o(.text.HAL_DMA2D_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA2D_ConfigLayer
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>HAL_DMA2D_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_dma2d.o(.text.HAL_DMA2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA2D_Init &rArr; HAL_DMA2D_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>HAL_DMA2D_MspInit</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, stm32f4xx_hal_msp.o(.text.HAL_DMA2D_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA2D_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
</UL>

<P><STRONG><a name="[11b]"></a>HAL_DMA_Abort</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 442 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_INT_Out
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_INT_In
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
</UL>

<P><STRONG><a name="[15b]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDrive
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[14e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTASK
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_NoACK
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ACK
</UL>

<P><STRONG><a name="[104]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>

<P><STRONG><a name="[142]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>HAL_InitTick</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[126]"></a>HAL_LTDC_ConfigLayer</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_ConfigLayer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_LTDC_ConfigLayer &rArr; LTDC_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>HAL_LTDC_Init</STRONG> (Thumb, 228 bytes, Stack size 8 bytes, stm32f4xx_hal_ltdc.o(.text.HAL_LTDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_LTDC_Init &rArr; HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>HAL_LTDC_MspInit</STRONG> (Thumb, 252 bytes, Stack size 104 bytes, stm32f4xx_hal_msp.o(.text.HAL_LTDC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = HAL_LTDC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[120]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f4xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_MspInit
</UL>

<P><STRONG><a name="[12f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[168]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[130]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[132]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_SDRAM_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SDRAM_Init &rArr; HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Timing_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>HAL_SDRAM_MspInit</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(.text.HAL_SDRAM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SDRAM_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_SDRAM_SendCommand</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_sdram.o(.text.HAL_SDRAM_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[138]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[147]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[143]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1378 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[145]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>IDLETaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, idle.o(.text.IDLETaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IDLETaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[14f]"></a>LEDTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ledtask.o(.text.LEDTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LEDTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[150]"></a>MX_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.MX_ThreadX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>Printf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, uart.o(.text.Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Printf &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[155]"></a>PrintfHex</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, uart.o(.text.PrintfHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PrintfHex &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[156]"></a>SDRAM_Initialization_Sequence</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, sdram.o(.text.SDRAM_Initialization_Sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SDRAM_Initialization_Sequence &rArr; HAL_SDRAM_SendCommand &rArr; FMC_SDRAM_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>SYSTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, systask.o(.text.SYSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[159]"></a>SystemClock_Config</STRONG> (Thumb, 194 bytes, Stack size 80 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[115]"></a>TouchDrive</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, f429_gx_drive.o(.text.TouchDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TouchDrive &rArr; Touch_Scan &rArr; GT9XX_ReadReg &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[15d]"></a>Touch_IIC_ACK</STRONG> (Thumb, 4712 bytes, Stack size 24 bytes, touch_iic.o(.text.Touch_IIC_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_ACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[163]"></a>Touch_IIC_Delay</STRONG> (Thumb, 470 bytes, Stack size 4 bytes, touch_iic.o(.text.Touch_IIC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Touch_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[15e]"></a>Touch_IIC_GPIO_Config</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, touch_iic.o(.text.Touch_IIC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Touch_IIC_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[15f]"></a>Touch_IIC_NoACK</STRONG> (Thumb, 4704 bytes, Stack size 24 bytes, touch_iic.o(.text.Touch_IIC_NoACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_NoACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ReadByte
</UL>

<P><STRONG><a name="[108]"></a>Touch_IIC_ReadByte</STRONG> (Thumb, 2368 bytes, Stack size 40 bytes, touch_iic.o(.text.Touch_IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Touch_IIC_ReadByte &rArr; Touch_IIC_NoACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_NoACK
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_ACK
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[106]"></a>Touch_IIC_Start</STRONG> (Thumb, 3540 bytes, Stack size 32 bytes, touch_iic.o(.text.Touch_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Touch_IIC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[109]"></a>Touch_IIC_Stop</STRONG> (Thumb, 4700 bytes, Stack size 24 bytes, touch_iic.o(.text.Touch_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Touch_IIC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[160]"></a>Touch_IIC_WaitACK</STRONG> (Thumb, 3546 bytes, Stack size 32 bytes, touch_iic.o(.text.Touch_IIC_WaitACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
</UL>

<P><STRONG><a name="[107]"></a>Touch_IIC_WriteByte</STRONG> (Thumb, 2346 bytes, Stack size 32 bytes, touch_iic.o(.text.Touch_IIC_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WaitACK
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Scan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
</UL>

<P><STRONG><a name="[161]"></a>Touch_INT_In</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, touch_iic.o(.text.Touch_INT_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Touch_INT_In &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[162]"></a>Touch_INT_Out</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, touch_iic.o(.text.Touch_INT_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Touch_INT_Out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[10a]"></a>Touch_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, touch_480x272.o(.text.Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Touch_Init &rArr; Touch_IIC_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_INT_Out
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_INT_In
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_GPIO_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[15a]"></a>Touch_Scan</STRONG> (Thumb, 376 bytes, Stack size 80 bytes, touch_480x272.o(.text.Touch_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Touch_Scan &rArr; GT9XX_ReadReg &rArr; Touch_IIC_WriteByte &rArr; Touch_IIC_WaitACK
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GT9XX_ReadReg
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_WriteByte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Stop
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDrive
</UL>

<P><STRONG><a name="[157]"></a>UART1TaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, uart.o(.text.UART1TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART1TaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[169]"></a>_gx_animation_complete</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, gx_animation_complete.o(.text._gx_animation_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gx_animation_complete &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_screen_stack_push
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[176]"></a>_gx_animation_complete_event_send</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, gx_animation_complete.o(.text._gx_animation_complete_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_animation_complete_event_send &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
</UL>

<P><STRONG><a name="[177]"></a>_gx_animation_create</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_animation_create.o(.text._gx_animation_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _gx_animation_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_create
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[178]"></a>_gx_animation_drag_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_animation_drag_disable.o(.text._gx_animation_drag_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_animation_drag_disable &rArr; _gx_animation_stop &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_drag_disable
</UL>

<P><STRONG><a name="[231]"></a>_gx_animation_drag_enable</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gx_animation_drag_enable.o(.text._gx_animation_drag_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_animation_drag_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_drag_enable
</UL>

<P><STRONG><a name="[6f]"></a>_gx_animation_drag_event_process</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, gx_animation_drag_event_process.o(.text._gx_animation_drag_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _gx_animation_drag_event_process &rArr; _gx_animation_drag_tracking &rArr; _gx_animation_drag_tracking_start &rArr; _gx_widget_resize &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking_start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_animation_drag_enable.o(.text._gx_animation_drag_enable)
</UL>
<P><STRONG><a name="[17a]"></a>_gx_animation_drag_tracking</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, gx_animation_drag_tracking.o(.text._gx_animation_drag_tracking))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _gx_animation_drag_tracking &rArr; _gx_animation_drag_tracking_start &rArr; _gx_widget_resize &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
</UL>

<P><STRONG><a name="[179]"></a>_gx_animation_drag_tracking_start</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, gx_animation_drag_tracking_start.o(.text._gx_animation_drag_tracking_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _gx_animation_drag_tracking_start &rArr; _gx_widget_resize &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
</UL>

<P><STRONG><a name="[17b]"></a>_gx_animation_slide_landing</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, gx_animation_slide_landing.o(.text._gx_animation_slide_landing))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gx_animation_slide_landing &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete_event_send
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
</UL>

<P><STRONG><a name="[17f]"></a>_gx_animation_slide_landing_start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gx_animation_slide_landing_start.o(.text._gx_animation_slide_landing_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_animation_slide_landing_start &rArr; _gx_system_timer_start &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
</UL>

<P><STRONG><a name="[16a]"></a>_gx_animation_stop</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, gx_animation_stop.o(.text._gx_animation_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_animation_stop &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_disable
</UL>

<P><STRONG><a name="[186]"></a>_gx_animation_update</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, gx_animation_update.o(.text._gx_animation_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_alpha_set
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[1a9]"></a>_gx_brush_default</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gx_brush_default.o(.text._gx_brush_default))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_default
</UL>

<P><STRONG><a name="[1ac]"></a>_gx_brush_define</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_brush_define.o(.text._gx_brush_define))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
</UL>

<P><STRONG><a name="[18a]"></a>_gx_button_background_draw</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, gx_button_background_draw.o(.text._gx_button_background_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _gx_button_background_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_draw
</UL>

<P><STRONG><a name="[18d]"></a>_gx_button_create</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gx_button_create.o(.text._gx_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_create
</UL>

<P><STRONG><a name="[71]"></a>_gx_button_deselect</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gx_button_deselect.o(.text._gx_button_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gx_button_deselect &rArr; _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[72]"></a>_gx_button_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_button_draw.o(.text._gx_button_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _gx_button_draw &rArr; _gx_button_background_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[73]"></a>_gx_button_event_process</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, gx_button_event_process.o(.text._gx_button_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gx_button_event_process &rArr; _gx_widget_event_process &rArr; _gx_system_input_release &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_to_parent
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[70]"></a>_gx_button_select</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, gx_button_select.o(.text._gx_button_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_button_select &rArr; _gx_widget_front_move &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_siblings_deselect
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_button_create.o(.text._gx_button_create)
</UL>
<P><STRONG><a name="[196]"></a>_gx_button_siblings_deselect</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gx_button_siblings_deselect.o(.text._gx_button_siblings_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_button_siblings_deselect
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
</UL>

<P><STRONG><a name="[187]"></a>_gx_canvas_alpha_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_canvas_alpha_set.o(.text._gx_canvas_alpha_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_canvas_alpha_set
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[198]"></a>_gx_canvas_block_move</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, gx_canvas_block_move.o(.text._gx_canvas_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_canvas_block_move
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_inside_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[19a]"></a>_gx_canvas_composite_create</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, gx_canvas_composite_create.o(.text._gx_canvas_composite_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_canvas_composite_create
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[19d]"></a>_gx_canvas_create</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, gx_canvas_create.o(.text._gx_canvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_canvas_create &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_canvas_create
</UL>

<P><STRONG><a name="[197]"></a>_gx_canvas_dirty_mark</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_canvas_dirty_mark.o(.text._gx_canvas_dirty_mark))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_alpha_set
</UL>

<P><STRONG><a name="[1ed]"></a>_gx_canvas_drawing_complete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, gx_canvas_drawing_complete.o(.text._gx_canvas_drawing_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_canvas_drawing_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[19f]"></a>_gx_canvas_drawing_initiate</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, gx_canvas_drawing_initiate.o(.text._gx_canvas_drawing_initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_canvas_drawing_initiate &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_default
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[172]"></a>_gx_canvas_hide</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, gx_canvas_hide.o(.text._gx_canvas_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_canvas_hide &rArr; _gx_utility_rectangle_define
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[1a3]"></a>_gx_canvas_line_draw</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, gx_canvas_line_draw.o(.text._gx_canvas_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_polygon_draw
</UL>

<P><STRONG><a name="[189]"></a>_gx_canvas_offset_set</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, gx_canvas_offset_set.o(.text._gx_canvas_offset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_canvas_offset_set
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_shift
</UL>

<P><STRONG><a name="[1a4]"></a>_gx_canvas_pixel_draw</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, gx_canvas_pixel_draw.o(.text._gx_canvas_pixel_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_canvas_pixel_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[1a5]"></a>_gx_canvas_pixelmap_draw</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, gx_canvas_pixelmap_draw.o(.text._gx_canvas_pixelmap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_canvas_pixelmap_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_draw
</UL>

<P><STRONG><a name="[1a6]"></a>_gx_canvas_pixelmap_tile</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, gx_canvas_pixelmap_tile.o(.text._gx_canvas_pixelmap_tile))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_canvas_pixelmap_tile &rArr; _gx_canvas_pixelmap_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[1a7]"></a>_gx_canvas_rectangle_draw</STRONG> (Thumb, 830 bytes, Stack size 104 bytes, gx_canvas_rectangle_draw.o(.text._gx_canvas_rectangle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[1a8]"></a>_gx_canvas_shift</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_canvas_shift.o(.text._gx_canvas_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_canvas_shift &rArr; _gx_canvas_offset_set
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_offset_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_event_process
</UL>

<P><STRONG><a name="[1a1]"></a>_gx_context_brush_default</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gx_context_brush_default.o(.text._gx_context_brush_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_context_brush_default
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_brush_default
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
</UL>

<P><STRONG><a name="[1aa]"></a>_gx_context_brush_define</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gx_context_brush_define.o(.text._gx_context_brush_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_context_brush_define
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_brush_define
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[218]"></a>_gx_context_brush_width_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_context_brush_width_set.o(.text._gx_context_brush_width_set))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[1ab]"></a>_gx_context_color_get</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gx_context_color_get.o(.text._gx_context_color_get))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_line_color_set
</UL>

<P><STRONG><a name="[1ad]"></a>_gx_context_fill_color_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gx_context_fill_color_set.o(.text._gx_context_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_context_fill_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_context_fill_set
</UL>

<P><STRONG><a name="[1ae]"></a>_gx_context_line_color_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gx_context_line_color_set.o(.text._gx_context_line_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_context_line_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>

<P><STRONG><a name="[1e5]"></a>_gx_context_pixelmap_get</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gx_context_pixelmap_get.o(.text._gx_context_pixelmap_get))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_draw
</UL>

<P><STRONG><a name="[1af]"></a>_gx_display_active_language_set</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, gx_display_active_language_set.o(.text._gx_display_active_language_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_display_active_language_set &rArr; _gx_system_all_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_active_language_set
</UL>

<P><STRONG><a name="[1b1]"></a>_gx_display_canvas_dirty</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, gx_display_canvas_dirty.o(.text._gx_display_canvas_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_color_table_set
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_pixelmap_table_set
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_font_table_set
</UL>

<P><STRONG><a name="[1b2]"></a>_gx_display_color_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_color_table_set.o(.text._gx_display_color_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_color_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_color_table_set
</UL>

<P><STRONG><a name="[1b3]"></a>_gx_display_create</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, gx_display_create.o(.text._gx_display_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _gx_display_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_create
</UL>

<P><STRONG><a name="[98]"></a>_gx_display_driver_24xrgb_canvas_blend</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, gx_display_driver_24xrgb_canvas_blend.o(.text._gx_display_driver_24xrgb_canvas_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_24xrgb_canvas_blend &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[9e]"></a>_gx_display_driver_24xrgb_jpeg_draw</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_jpeg_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = _gx_display_driver_24xrgb_jpeg_draw &rArr; _gx_image_reader_jpeg_mcu_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1b6]"></a>_gx_display_driver_24xrgb_pixel_blend</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gx_display_driver_24xrgb_pixel_blend.o(.text._gx_display_driver_24xrgb_pixel_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_draw
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_blend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_glyph_1bit_draw
</UL>

<P><STRONG><a name="[1b5]"></a>_gx_display_driver_24xrgb_pixelmap_blend</STRONG> (Thumb, 1260 bytes, Stack size 56 bytes, gx_display_driver_24xrgb_pixelmap_blend.o(.text._gx_display_driver_24xrgb_pixelmap_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_display_driver_24xrgb_pixelmap_blend &rArr; _gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_draw
</UL>

<P><STRONG><a name="[1b7]"></a>_gx_display_driver_24xrgb_pixelmap_draw</STRONG> (Thumb, 10188 bytes, Stack size 96 bytes, gx_display_driver_32bpp_pixelmap_draw.o(.text._gx_display_driver_24xrgb_pixelmap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_display_driver_24xrgb_pixelmap_draw &rArr; _gx_display_driver_24xrgb_pixelmap_blend &rArr; _gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_blend
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixel_blend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_pixel_write
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_png_draw
</UL>

<P><STRONG><a name="[9f]"></a>_gx_display_driver_24xrgb_png_draw</STRONG> (Thumb, 78 bytes, Stack size 144 bytes, gx_display_driver_24xrgb_png_draw.o(.text._gx_display_driver_24xrgb_png_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196 + Unknown Stack Size
<LI>Call Chain = _gx_display_driver_24xrgb_png_draw &rArr; _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[7e]"></a>_gx_display_driver_32argb_native_color_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gx_display_driver_32argb_native_color_get.o(.text._gx_display_driver_32argb_native_color_get))
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[99]"></a>_gx_display_driver_32argb_pixel_blend</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, gx_display_driver_32argb_pixel_blend.o(.text._gx_display_driver_32argb_pixel_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_driver_32argb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_horizontal_pixelmap_line_draw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixelmap_draw
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixelmap_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[9a]"></a>_gx_display_driver_32argb_pixelmap_blend</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, gx_display_driver_32argb_pixelmap_blend.o(.text._gx_display_driver_32argb_pixelmap_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_32argb_pixelmap_blend &rArr; _gx_display_driver_32argb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixel_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixelmap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[80]"></a>_gx_display_driver_32argb_pixelmap_draw</STRONG> (Thumb, 2598 bytes, Stack size 104 bytes, gx_display_driver_32argb_pixelmap_draw.o(.text._gx_display_driver_32argb_pixelmap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_display_driver_32argb_pixelmap_draw &rArr; _gx_display_driver_32argb_pixelmap_blend &rArr; _gx_display_driver_32argb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixel_blend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_pixel_write
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixelmap_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[264]"></a>_gx_display_driver_32argb_setup</STRONG> (Thumb, 536 bytes, Stack size 40 bytes, gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_display_driver_32argb_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_graphics_driver_setup_24xrgb
</UL>

<P><STRONG><a name="[7d]"></a>_gx_display_driver_32bpp_block_move</STRONG> (Thumb, 880 bytes, Stack size 32 bytes, gx_display_driver_32bpp_block_move.o(.text._gx_display_driver_32bpp_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_display_driver_32bpp_block_move &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[75]"></a>_gx_display_driver_32bpp_canvas_copy</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, gx_display_driver_32bpp_canvas_copy.o(.text._gx_display_driver_32bpp_canvas_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_32bpp_canvas_copy &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[9d]"></a>_gx_display_driver_32bpp_glyph_1bit_draw</STRONG> (Thumb, 1712 bytes, Stack size 104 bytes, gx_display_driver_32bpp_glyph_1bit_draw.o(.text._gx_display_driver_32bpp_glyph_1bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_display_driver_32bpp_glyph_1bit_draw &rArr; _gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixel_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[77]"></a>_gx_display_driver_32bpp_horizontal_line_draw</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, gx_display_driver_32bpp_horizontal_line_draw.o(.text._gx_display_driver_32bpp_horizontal_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_32bpp_horizontal_line_draw &rArr; _gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[79]"></a>_gx_display_driver_32bpp_horizontal_pattern_line_draw</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, gx_display_driver_32bpp_horizontal_pattern_line_draw.o(.text._gx_display_driver_32bpp_horizontal_pattern_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_driver_32bpp_horizontal_pattern_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[7b]"></a>_gx_display_driver_32bpp_horizontal_pixelmap_line_draw</STRONG> (Thumb, 2166 bytes, Stack size 64 bytes, gx_display_driver_32bpp_horizontal_pixelmap_line_draw.o(.text._gx_display_driver_32bpp_horizontal_pixelmap_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_32bpp_horizontal_pixelmap_line_draw &rArr; _gx_display_driver_32argb_pixel_blend
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixel_blend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[7c]"></a>_gx_display_driver_32bpp_pixel_write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gx_display_driver_32bpp_pixel_write.o(.text._gx_display_driver_32bpp_pixel_write))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_pixelmap_draw
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_horizontal_pixelmap_line_draw
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_pixelmap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[81]"></a>_gx_display_driver_32bpp_pixelmap_rotate</STRONG> (Thumb, 2866 bytes, Stack size 152 bytes, gx_display_driver_32bpp_pixelmap_rotate.o(.text._gx_display_driver_32bpp_pixelmap_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gx_display_driver_32bpp_pixelmap_rotate &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[7f]"></a>_gx_display_driver_32bpp_row_pitch_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gx_display_driver_32bpp_row_pitch_get.o(.text._gx_display_driver_32bpp_row_pitch_get))
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[76]"></a>_gx_display_driver_32bpp_simple_line_draw</STRONG> (Thumb, 2182 bytes, Stack size 112 bytes, gx_display_driver_32bpp_simple_line_draw.o(.text._gx_display_driver_32bpp_simple_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gx_display_driver_32bpp_simple_line_draw &rArr; _gx_display_driver_simple_line_alpha_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[78]"></a>_gx_display_driver_32bpp_vertical_line_draw</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, gx_display_driver_32bpp_vertical_line_draw.o(.text._gx_display_driver_32bpp_vertical_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_32bpp_vertical_line_draw &rArr; _gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[7a]"></a>_gx_display_driver_32bpp_vertical_pattern_line_draw</STRONG> (Thumb, 314 bytes, Stack size 44 bytes, gx_display_driver_32bpp_vertical_pattern_line_draw.o(.text._gx_display_driver_32bpp_vertical_pattern_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gx_display_driver_32bpp_vertical_pattern_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1c0]"></a>_gx_display_driver_arc_clipping_get</STRONG> (Thumb, 926 bytes, Stack size 48 bytes, gx_display_driver_arc_clipping_get.o(.text._gx_display_driver_arc_clipping_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
</UL>

<P><STRONG><a name="[90]"></a>_gx_display_driver_generic_aliased_arc_draw</STRONG> (Thumb, 984 bytes, Stack size 144 bytes, gx_display_driver_generic_aliased_arc_draw.o(.text._gx_display_driver_generic_aliased_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gx_display_driver_generic_aliased_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[88]"></a>_gx_display_driver_generic_aliased_circle_draw</STRONG> (Thumb, 622 bytes, Stack size 88 bytes, gx_display_driver_generic_aliased_circle_draw.o(.text._gx_display_driver_generic_aliased_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_generic_aliased_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8b]"></a>_gx_display_driver_generic_aliased_ellipse_draw</STRONG> (Thumb, 1328 bytes, Stack size 112 bytes, gx_display_driver_generic_aliased_ellipse_draw.o(.text._gx_display_driver_generic_aliased_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_display_driver_generic_aliased_ellipse_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1c3]"></a>_gx_display_driver_generic_aliased_filled_circle_draw</STRONG> (Thumb, 1408 bytes, Stack size 120 bytes, gx_display_driver_generic_aliased_filled_circle_draw.o(.text._gx_display_driver_generic_aliased_filled_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_display_driver_generic_aliased_filled_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[1c4]"></a>_gx_display_driver_generic_aliased_fixed_point_line_draw</STRONG> (Thumb, 1508 bytes, Stack size 96 bytes, gx_display_driver_generic_aliased_fixed_point_line_draw.o(.text._gx_display_driver_generic_aliased_fixed_point_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
</UL>

<P><STRONG><a name="[86]"></a>_gx_display_driver_generic_aliased_line_draw</STRONG> (Thumb, 1600 bytes, Stack size 96 bytes, gx_display_driver_generic_aliased_line_draw.o(.text._gx_display_driver_generic_aliased_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_generic_aliased_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[93]"></a>_gx_display_driver_generic_aliased_wide_arc_draw</STRONG> (Thumb, 588 bytes, Stack size 72 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_aliased_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _gx_display_driver_generic_aliased_wide_arc_draw &rArr; _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[96]"></a>_gx_display_driver_generic_aliased_wide_circle_draw</STRONG> (Thumb, 1096 bytes, Stack size 136 bytes, gx_display_driver_generic_aliased_wide_circle_draw.o(.text._gx_display_driver_generic_aliased_wide_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = _gx_display_driver_generic_aliased_wide_circle_draw &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8f]"></a>_gx_display_driver_generic_aliased_wide_ellipse_draw</STRONG> (Thumb, 2042 bytes, Stack size 192 bytes, gx_display_driver_generic_aliased_wide_ellipse_draw.o(.text._gx_display_driver_generic_aliased_wide_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = _gx_display_driver_generic_aliased_wide_ellipse_draw &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[87]"></a>_gx_display_driver_generic_aliased_wide_line_draw</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, gx_display_driver_generic_aliased_wide_line_draw.o(.text._gx_display_driver_generic_aliased_wide_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gx_display_driver_generic_aliased_wide_line_draw &rArr; _gx_display_driver_generic_wide_line_points_calculate &rArr; _gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_fill
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_rotated_wide_line_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[82]"></a>_gx_display_driver_generic_alphamap_draw</STRONG> (Thumb, 1578 bytes, Stack size 64 bytes, gx_display_driver_generic_alphamap_draw.o(.text._gx_display_driver_generic_alphamap_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_display_driver_generic_alphamap_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[91]"></a>_gx_display_driver_generic_arc_draw</STRONG> (Thumb, 672 bytes, Stack size 128 bytes, gx_display_driver_generic_arc_draw.o(.text._gx_display_driver_generic_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _gx_display_driver_generic_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[97]"></a>_gx_display_driver_generic_arc_fill</STRONG> (Thumb, 1792 bytes, Stack size 192 bytes, gx_display_driver_generic_arc_fill.o(.text._gx_display_driver_generic_arc_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _gx_display_driver_generic_arc_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[89]"></a>_gx_display_driver_generic_circle_draw</STRONG> (Thumb, 1024 bytes, Stack size 104 bytes, gx_display_driver_generic_circle_draw.o(.text._gx_display_driver_generic_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_circle_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[95]"></a>_gx_display_driver_generic_circle_fill</STRONG> (Thumb, 1006 bytes, Stack size 128 bytes, gx_display_driver_generic_circle_fill.o(.text._gx_display_driver_generic_circle_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gx_display_driver_generic_circle_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8c]"></a>_gx_display_driver_generic_ellipse_draw</STRONG> (Thumb, 1256 bytes, Stack size 104 bytes, gx_display_driver_generic_ellipse_draw.o(.text._gx_display_driver_generic_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_ellipse_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8e]"></a>_gx_display_driver_generic_ellipse_fill</STRONG> (Thumb, 996 bytes, Stack size 136 bytes, gx_display_driver_generic_ellipse_fill.o(.text._gx_display_driver_generic_ellipse_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gx_display_driver_generic_ellipse_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1cb]"></a>_gx_display_driver_generic_filled_circle_draw</STRONG> (Thumb, 778 bytes, Stack size 104 bytes, gx_display_driver_generic_filled_circle_draw.o(.text._gx_display_driver_generic_filled_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_filled_circle_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
</UL>

<P><STRONG><a name="[9c]"></a>_gx_display_driver_generic_glyph_4bit_draw</STRONG> (Thumb, 958 bytes, Stack size 80 bytes, gx_display_driver_generic_glyph_4bpp_draw.o(.text._gx_display_driver_generic_glyph_4bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_glyph_4bit_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[9b]"></a>_gx_display_driver_generic_glyph_8bit_draw</STRONG> (Thumb, 316 bytes, Stack size 72 bytes, gx_display_driver_generic_glyph_8bpp_draw.o(.text._gx_display_driver_generic_glyph_8bit_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_display_driver_generic_glyph_8bit_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8a]"></a>_gx_display_driver_generic_pie_fill</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, gx_display_driver_generic_pie_fill.o(.text._gx_display_driver_generic_pie_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _gx_display_driver_generic_pie_fill &rArr; _gx_display_driver_generic_simple_pie_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[84]"></a>_gx_display_driver_generic_polygon_draw</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gx_display_driver_generic_polygon_draw.o(.text._gx_display_driver_generic_polygon_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gx_display_driver_generic_polygon_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[85]"></a>_gx_display_driver_generic_polygon_fill</STRONG> (Thumb, 2984 bytes, Stack size 152 bytes, gx_display_driver_generic_polygon_fill.o(.text._gx_display_driver_generic_polygon_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _gx_display_driver_generic_polygon_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1c7]"></a>_gx_display_driver_generic_rotated_wide_line_fill</STRONG> (Thumb, 942 bytes, Stack size 88 bytes, gx_display_driver_generic_rotated_wide_line_fill.o(.text._gx_display_driver_generic_rotated_wide_line_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_display_driver_generic_rotated_wide_line_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
</UL>

<P><STRONG><a name="[1c9]"></a>_gx_display_driver_generic_simple_pie_fill</STRONG> (Thumb, 1748 bytes, Stack size 192 bytes, gx_display_driver_generic_simple_pie_fill.o(.text._gx_display_driver_generic_simple_pie_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _gx_display_driver_generic_simple_pie_fill &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_pie_fill
</UL>

<P><STRONG><a name="[83]"></a>_gx_display_driver_generic_simple_wide_line_draw</STRONG> (Thumb, 392 bytes, Stack size 72 bytes, gx_display_driver_generic_simple_wide_line_draw.o(.text._gx_display_driver_generic_simple_wide_line_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gx_display_driver_generic_simple_wide_line_draw &rArr; _gx_display_driver_generic_wide_line_points_calculate &rArr; _gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_fill
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_rotated_wide_line_fill
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_filled_circle_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[94]"></a>_gx_display_driver_generic_wide_arc_draw</STRONG> (Thumb, 536 bytes, Stack size 64 bytes, gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _gx_display_driver_generic_wide_arc_draw &rArr; _gx_display_driver_generic_simple_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_filled_circle_draw
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[92]"></a>_gx_display_driver_generic_wide_circle_draw</STRONG> (Thumb, 910 bytes, Stack size 80 bytes, gx_display_driver_generic_wide_circle_draw.o(.text._gx_display_driver_generic_wide_circle_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_display_driver_generic_wide_circle_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[8d]"></a>_gx_display_driver_generic_wide_ellipse_draw</STRONG> (Thumb, 1278 bytes, Stack size 96 bytes, gx_display_driver_generic_wide_ellipse_draw.o(.text._gx_display_driver_generic_wide_ellipse_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_display_driver_generic_wide_ellipse_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_32argb_setup.o(.text._gx_display_driver_32argb_setup)
</UL>
<P><STRONG><a name="[1c8]"></a>_gx_display_driver_generic_wide_line_fill</STRONG> (Thumb, 968 bytes, Stack size 104 bytes, gx_display_driver_generic_wide_line_fill.o(.text._gx_display_driver_generic_wide_line_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_display_driver_generic_wide_line_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
</UL>

<P><STRONG><a name="[1c6]"></a>_gx_display_driver_generic_wide_line_points_calculate</STRONG> (Thumb, 384 bytes, Stack size 96 bytes, gx_display_driver_generic_wide_line_points_calculate.o(.text._gx_display_driver_generic_wide_line_points_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gx_display_driver_generic_wide_line_points_calculate &rArr; _gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_fixed_point_line_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
</UL>

<P><STRONG><a name="[1bb]"></a>_gx_display_driver_horizontal_line_alpha_draw</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, gx_display_driver_horizontal_line_alpha_draw.o(.text._gx_display_driver_horizontal_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_horizontal_line_alpha_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_horizontal_line_draw
</UL>

<P><STRONG><a name="[1be]"></a>_gx_display_driver_simple_line_alpha_draw</STRONG> (Thumb, 1492 bytes, Stack size 112 bytes, gx_display_driver_simple_line_alpha_draw.o(.text._gx_display_driver_simple_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gx_display_driver_simple_line_alpha_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_simple_line_draw
</UL>

<P><STRONG><a name="[1bf]"></a>_gx_display_driver_vertical_line_alpha_draw</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, gx_display_driver_vertical_line_alpha_draw.o(.text._gx_display_driver_vertical_line_alpha_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_display_driver_vertical_line_alpha_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_vertical_line_draw
</UL>

<P><STRONG><a name="[1cc]"></a>_gx_display_font_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_font_table_set.o(.text._gx_display_font_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_font_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_font_table_set
</UL>

<P><STRONG><a name="[1cd]"></a>_gx_display_language_table_set_ext</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, gx_display_language_table_set.o(.text._gx_display_language_table_set_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _gx_display_language_table_set_ext &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
</UL>

<P><STRONG><a name="[1ce]"></a>_gx_display_pixelmap_table_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gx_display_pixelmap_table_set.o(.text._gx_display_pixelmap_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_display_pixelmap_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_pixelmap_table_set
</UL>

<P><STRONG><a name="[1d1]"></a>_gx_image_reader_colorspace_convert</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_image_reader_colorspace_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1b8]"></a>_gx_image_reader_create</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gx_image_reader_create.o(.text._gx_image_reader_create))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_png_draw
</UL>

<P><STRONG><a name="[1d3]"></a>_gx_image_reader_image_decode</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, gx_image_reader_image_decode.o(.text._gx_image_reader_image_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 948 + Unknown Stack Size
<LI>Call Chain = _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1d5]"></a>_gx_image_reader_jpeg_decode</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
</UL>

<P><STRONG><a name="[1b4]"></a>_gx_image_reader_jpeg_mcu_decode</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_mcu_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = _gx_image_reader_jpeg_mcu_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_jpeg_draw
</UL>

<P><STRONG><a name="[1d0]"></a>_gx_image_reader_nearest_palette_color_get</STRONG> (Thumb, 570 bytes, Stack size 52 bytes, gx_image_reader_nearest_palette_color_get.o(.text._gx_image_reader_nearest_palette_color_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_8bit_palette_write
</UL>

<P><STRONG><a name="[1e2]"></a>_gx_image_reader_pixel_read_callback_set</STRONG> (Thumb, 464 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1d9]"></a>_gx_image_reader_pixel_write_callback_set</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_pixel_write_callback_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1d4]"></a>_gx_image_reader_png_decode</STRONG> (Thumb, 8060 bytes, Stack size 312 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = _gx_image_reader_png_decode &rArr; _gx_image_reader_png_huffcode_decode &rArr; _gx_image_reader_png_bits_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
</UL>

<P><STRONG><a name="[1cf]"></a>_gx_image_reader_rgb2gray</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_image_reader_start.o(.text._gx_image_reader_rgb2gray))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_transparent_write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_monochrome_pixel_write
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_transparent_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_4bit_grayscale_pixel_write
</UL>

<P><STRONG><a name="[1de]"></a>_gx_image_reader_rle_encode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_image_reader_rle_encode &rArr; _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1e0]"></a>_gx_image_reader_rle_encode_size_get</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_encode_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_image_reader_rle_encode_size_get &rArr; _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_start
</UL>

<P><STRONG><a name="[1b9]"></a>_gx_image_reader_start</STRONG> (Thumb, 1024 bytes, Stack size 104 bytes, gx_image_reader_start.o(.text._gx_image_reader_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1052 + Unknown Stack Size
<LI>Call Chain = _gx_image_reader_start &rArr; _gx_image_reader_image_decode &rArr; _gx_image_reader_jpeg_decode &rArr; _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_colorspace_convert
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_write_callback_set
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_pixel_read_callback_set
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_image_decode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode_size_get
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_png_draw
</UL>

<P><STRONG><a name="[1e3]"></a>_gx_menu_insert</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gx_menu_insert.o(.text._gx_menu_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gx_menu_insert &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_menu_insert
</UL>

<P><STRONG><a name="[1e4]"></a>_gx_pixelmap_button_create</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, gx_pixelmap_button_create.o(.text._gx_pixelmap_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gx_pixelmap_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_pixelmap_button_create
</UL>

<P><STRONG><a name="[c7]"></a>_gx_pixelmap_button_draw</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, gx_pixelmap_button_draw.o(.text._gx_pixelmap_button_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gx_pixelmap_button_draw &rArr; _gx_button_draw &rArr; _gx_button_background_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_draw
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_pixelmap_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_context_fill_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_pixelmap_button_create.o(.text._gx_pixelmap_button_create)
</UL>
<P><STRONG><a name="[c8]"></a>_gx_pixelmap_button_event_process</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gx_pixelmap_button_event_process.o(.text._gx_pixelmap_button_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gx_pixelmap_button_event_process &rArr; _gx_button_event_process &rArr; _gx_widget_event_process &rArr; _gx_system_input_release &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_transparent_detect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_pixelmap_button_create.o(.text._gx_pixelmap_button_create)
</UL>
<P><STRONG><a name="[1e7]"></a>_gx_pixelmap_button_transparent_detect</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gx_pixelmap_button_transparent_detect.o(.text._gx_pixelmap_button_transparent_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_pixelmap_button_transparent_detect &rArr; _gx_widget_transparent_pixelmap_detect &rArr; _gx_widget_canvas_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_add
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_transparent_pixelmap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_event_process
</UL>

<P><STRONG><a name="[1b0]"></a>_gx_system_all_canvas_dirty</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gx_system_all_canvas_dirty.o(.text._gx_system_all_canvas_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_all_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_active_language_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
</UL>

<P><STRONG><a name="[1e9]"></a>_gx_system_all_views_free</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, gx_system_all_views_free.o(.text._gx_system_all_views_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_all_views_free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
</UL>

<P><STRONG><a name="[175]"></a>_gx_system_animation_free</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gx_system_animation_free.o(.text._gx_system_animation_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_system_animation_free &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[173]"></a>_gx_system_canvas_refresh</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, gx_system_canvas_refresh.o(.text._gx_system_canvas_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gx_system_canvas_refresh &rArr; _gx_system_views_update &rArr; _gx_system_root_view_add &rArr; _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[1ee]"></a>_gx_system_dirty_entry_shift</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gx_system_dirty_partial_add.o(.text._gx_system_dirty_entry_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_system_dirty_entry_shift &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
</UL>

<P><STRONG><a name="[21f]"></a>_gx_system_dirty_list_remove</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, gx_system_dirty_list_remove.o(.text._gx_system_dirty_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_dirty_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
</UL>

<P><STRONG><a name="[1ec]"></a>_gx_system_dirty_list_trim</STRONG> (Thumb, 394 bytes, Stack size 40 bytes, gx_system_dirty_list_trim.o(.text._gx_system_dirty_list_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_system_dirty_list_trim &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[16f]"></a>_gx_system_dirty_mark</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_system_dirty_mark.o(.text._gx_system_dirty_mark))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_canvas_dirty
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_canvas_dirty
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_fill_color_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_wallpaper_set
</UL>

<P><STRONG><a name="[188]"></a>_gx_system_dirty_partial_add</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, gx_system_dirty_partial_add.o(.text._gx_system_dirty_partial_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>

<P><STRONG><a name="[1a0]"></a>_gx_system_error_process</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gx_system_error_process.o(.text._gx_system_error_process))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_free_view_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
</UL>

<P><STRONG><a name="[1ef]"></a>_gx_system_event_dispatch</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, gx_system_event_dispatch.o(.text._gx_system_event_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_system_event_dispatch &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_widget_find
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[1f3]"></a>_gx_system_event_fold</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gx_system_event_fold.o(.text._gx_system_event_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_expiration
</UL>

<P><STRONG><a name="[1f5]"></a>_gx_system_event_remove</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, gx_system_event_remove.o(.text._gx_system_event_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_system_event_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
</UL>

<P><STRONG><a name="[174]"></a>_gx_system_event_send</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gx_system_event_send.o(.text._gx_system_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_event_send
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete_event_send
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[1f2]"></a>_gx_system_focus_claim</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, gx_system_focus_claim.o(.text._gx_system_focus_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_focus_assign
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_previous
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_next
</UL>

<P><STRONG><a name="[1fa]"></a>_gx_system_free_view_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gx_system_free_view_get.o(.text._gx_system_free_view_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_free_view_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>

<P><STRONG><a name="[1fb]"></a>_gx_system_initialize</STRONG> (Thumb, 1132 bytes, Stack size 64 bytes, gx_system_initialize.o(.text._gx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _gx_system_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_create
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_string_length_check
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_ltoa
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_initialize
</UL>

<P><STRONG><a name="[17c]"></a>_gx_system_input_capture</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, gx_system_input_capture.o(.text._gx_system_input_capture))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _gx_system_input_capture &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_add
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
</UL>

<P><STRONG><a name="[17d]"></a>_gx_system_input_release</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, gx_system_input_release.o(.text._gx_system_input_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_system_input_release &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
</UL>

<P><STRONG><a name="[183]"></a>_gx_system_lock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gx_system_lock.o(.text._gx_system_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_system_lock &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[23b]"></a>_gx_system_memory_allocator_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_system_memory_allocator_set.o(.text._gx_system_memory_allocator_set))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_memory_allocator_set
</UL>

<P><STRONG><a name="[1f9]"></a>_gx_system_pen_flick_test</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gx_system_pen_flick_test.o(.text._gx_system_pen_flick_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>

<P><STRONG><a name="[1f7]"></a>_gx_system_pen_speed_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gx_system_pen_speed_init.o(.text._gx_system_pen_speed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_pen_speed_init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>

<P><STRONG><a name="[1f4]"></a>_gx_system_pen_speed_update</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, gx_system_pen_speed_update.o(.text._gx_system_pen_speed_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_pen_speed_update
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>

<P><STRONG><a name="[206]"></a>_gx_system_root_view_add</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, gx_system_root_view_add.o(.text._gx_system_root_view_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_system_root_view_add &rArr; _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_split
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_update
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_split
</UL>

<P><STRONG><a name="[170]"></a>_gx_system_screen_stack_push</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gx_system_screen_stack_push.o(.text._gx_system_screen_stack_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gx_system_screen_stack_push &rArr; _gx_widget_detach &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[23d]"></a>_gx_system_scroll_appearance_set</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gx_system_scroll_appearance_set.o(.text._gx_system_scroll_appearance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_system_scroll_appearance_set
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_scroll_appearance_set
</UL>

<P><STRONG><a name="[209]"></a>_gx_system_start</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gx_system_start.o(.text._gx_system_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_system_start &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_start
</UL>

<P><STRONG><a name="[ca]"></a>_gx_system_thread_entry</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, gx_system_thread_entry.o(.text._gx_system_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _gx_system_thread_entry &rArr; _gx_system_timer_update &rArr; _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_system_initialize.o(.text._gx_system_initialize)
</UL>
<P><STRONG><a name="[c9]"></a>_gx_system_timer_expiration</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gx_system_timer_expiration.o(.text._gx_system_timer_expiration))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gx_system_timer_expiration &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_system_initialize.o(.text._gx_system_initialize)
</UL>
<P><STRONG><a name="[182]"></a>_gx_system_timer_start</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, gx_system_timer_start.o(.text._gx_system_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _gx_system_timer_start &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_info_get
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_activate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing_start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
</UL>

<P><STRONG><a name="[17e]"></a>_gx_system_timer_stop</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, gx_system_timer_stop.o(.text._gx_system_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _gx_system_timer_stop &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_deactivate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_event_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[20c]"></a>_gx_system_timer_update</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, gx_system_timer_update.o(.text._gx_system_timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _gx_system_timer_update &rArr; _gx_animation_update &rArr; _gx_animation_complete &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[1f0]"></a>_gx_system_top_root_find</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, gx_system_top_root_find.o(.text._gx_system_top_root_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_top_root_find
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
</UL>

<P><STRONG><a name="[1f1]"></a>_gx_system_top_widget_find</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, gx_system_top_widget_find.o(.text._gx_system_top_widget_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_top_widget_find
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_dispatch
</UL>

<P><STRONG><a name="[184]"></a>_gx_system_unlock</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gx_system_unlock.o(.text._gx_system_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_animation_free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_update
</UL>

<P><STRONG><a name="[208]"></a>_gx_system_view_add</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gx_system_view_add.o(.text._gx_system_view_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_system_view_add &rArr; _gx_system_free_view_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_free_view_get
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>

<P><STRONG><a name="[210]"></a>_gx_system_view_fold</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, gx_system_view_fold.o(.text._gx_system_view_fold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_system_view_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_view_add
</UL>

<P><STRONG><a name="[207]"></a>_gx_system_view_split</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, gx_system_view_split.o(.text._gx_system_view_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>

<P><STRONG><a name="[1ea]"></a>_gx_system_views_free</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_system_views_free.o(.text._gx_system_views_free))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
</UL>

<P><STRONG><a name="[1eb]"></a>_gx_system_views_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gx_system_views_update.o(.text._gx_system_views_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_system_views_update &rArr; _gx_system_root_view_add &rArr; _gx_system_view_split &rArr;  _gx_system_root_view_add (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_all_views_free
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
</UL>

<P><STRONG><a name="[1c1]"></a>_gx_utility_circle_point_get</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, gx_utility_circle_point_get.o(.text._gx_utility_circle_point_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
</UL>

<P><STRONG><a name="[181]"></a>_gx_utility_easing_function_calculate</STRONG> (Thumb, 1976 bytes, Stack size 24 bytes, gx_utility_easing_function_calculate.o(.text._gx_utility_easing_function_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_utility_easing_function_calculate &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_cos
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
</UL>

<P><STRONG><a name="[1fc]"></a>_gx_utility_ltoa</STRONG> (Thumb, 216 bytes, Stack size 44 bytes, gx_utility_ltoa.o(.text._gx_utility_ltoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gx_utility_ltoa
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[1bc]"></a>_gx_utility_math_cos</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_utility_math_cos.o(.text._gx_utility_math_cos))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_pixelmap_rotate
</UL>

<P><STRONG><a name="[1bd]"></a>_gx_utility_math_sin</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, gx_utility_math_sin.o(.text._gx_utility_math_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_utility_math_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_pixelmap_rotate
</UL>

<P><STRONG><a name="[1c2]"></a>_gx_utility_math_sqrt</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, gx_utility_math_sqrt.o(.text._gx_utility_math_sqrt))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_easing_function_calculate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_fill
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_circle_draw
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_ellipse_draw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_circle_draw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_line_points_calculate
</UL>

<P><STRONG><a name="[19c]"></a>_gx_utility_rectangle_combine</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gx_utility_rectangle_combine.o(.text._gx_utility_rectangle_combine))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
</UL>

<P><STRONG><a name="[228]"></a>_gx_utility_rectangle_compare</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gx_utility_rectangle_compare.o(.text._gx_utility_rectangle_compare))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
</UL>

<P><STRONG><a name="[19e]"></a>_gx_utility_rectangle_define</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gx_utility_rectangle_define.o(.text._gx_utility_rectangle_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
</UL>

<P><STRONG><a name="[199]"></a>_gx_utility_rectangle_inside_detect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gx_utility_rectangle_inside_detect.o(.text._gx_utility_rectangle_inside_detect))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_block_move
</UL>

<P><STRONG><a name="[1a2]"></a>_gx_utility_rectangle_overlap_detect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, gx_utility_rectangle_overlap_detect.o(.text._gx_utility_rectangle_overlap_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_overlap_detect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_line_draw
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_canvas_blend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_line_draw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_simple_line_draw
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_canvas_copy
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_clipping_update
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_trim
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_root_view_add
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>

<P><STRONG><a name="[194]"></a>_gx_utility_rectangle_point_detect</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_utility_rectangle_point_detect.o(.text._gx_utility_rectangle_point_detect))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_widget_find
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixel_draw
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_ellipse_draw
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_circle_draw
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_fill
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_arc_draw
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_simple_line_alpha_draw
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_ellipse_draw
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_circle_draw
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_line_draw
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_ellipse_draw
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_circle_draw
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_arc_draw
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_simple_line_draw
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_fixed_point_line_draw
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_filled_circle_draw
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_aliased_wide_arc_draw
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_pie_fill
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_simple_wide_arc_draw
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
</UL>

<P><STRONG><a name="[19b]"></a>_gx_utility_rectangle_shift</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gx_utility_rectangle_shift.o(.text._gx_utility_rectangle_shift))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_hide
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_composite_create
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_24xrgb_canvas_blend
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32bpp_canvas_copy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_top_root_find
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
</UL>

<P><STRONG><a name="[1fd]"></a>_gx_utility_string_length_check</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gx_utility_string_length_check.o(.text._gx_utility_string_length_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_utility_string_length_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
</UL>

<P><STRONG><a name="[211]"></a>_gx_widget_allocate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gx_widget_allocate.o(.text._gx_widget_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_allocate
</UL>

<P><STRONG><a name="[16e]"></a>_gx_widget_attach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gx_widget_attach.o(.text._gx_widget_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_attach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking_start
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_menu_insert
</UL>

<P><STRONG><a name="[212]"></a>_gx_widget_background_draw</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gx_widget_background_draw.o(.text._gx_widget_background_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _gx_widget_background_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw
</UL>

<P><STRONG><a name="[213]"></a>_gx_widget_block_move</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gx_widget_block_move.o(.text._gx_widget_block_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gx_widget_block_move &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_height_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_block_move
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_width_get
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>

<P><STRONG><a name="[18c]"></a>_gx_widget_border_draw</STRONG> (Thumb, 1088 bytes, Stack size 56 bytes, gx_widget_border_draw.o(.text._gx_widget_border_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_height_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_line_draw
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixel_draw
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_rectangle_draw
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_define
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_brush_width_set
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_line_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_background_draw
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[18b]"></a>_gx_widget_border_style_set</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, gx_widget_border_style_set.o(.text._gx_widget_border_style_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gx_widget_border_style_set &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_background_draw
</UL>

<P><STRONG><a name="[217]"></a>_gx_widget_border_width_get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gx_widget_border_width_get.o(.text._gx_widget_border_width_get))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[214]"></a>_gx_widget_canvas_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gx_widget_canvas_get.o(.text._gx_widget_canvas_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_canvas_get
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_transparent_pixelmap_detect
</UL>

<P><STRONG><a name="[21b]"></a>_gx_widget_child_clipping_update</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, gx_widget_child_clipping_update.o(.text._gx_widget_child_clipping_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>

<P><STRONG><a name="[1f6]"></a>_gx_widget_child_detect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, gx_widget_child_detect.o(.text._gx_widget_child_detect))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_remove
</UL>

<P><STRONG><a name="[21c]"></a>_gx_widget_child_focus_assign</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gx_widget_child_focus_assign.o(.text._gx_widget_child_focus_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_widget_child_focus_assign &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[192]"></a>_gx_widget_children_draw</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, gx_widget_children_draw.o(.text._gx_widget_children_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_widget_children_draw &rArr; _gx_canvas_drawing_initiate &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_initiate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_drawing_complete
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_canvas_refresh
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_draw
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_draw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_draw
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw
</UL>

<P><STRONG><a name="[221]"></a>_gx_widget_children_event_process</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gx_widget_children_event_process.o(.text._gx_widget_children_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_children_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[219]"></a>_gx_widget_client_get</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gx_widget_client_get.o(.text._gx_widget_client_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_widget_client_get
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_style_set
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>

<P><STRONG><a name="[21d]"></a>_gx_widget_clipping_update</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gx_widget_clipping_update.o(.text._gx_widget_clipping_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gx_widget_clipping_update &rArr; _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
</UL>

<P><STRONG><a name="[1e6]"></a>_gx_widget_context_fill_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gx_widget_context_fill_set.o(.text._gx_widget_context_fill_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_context_fill_set &rArr; _gx_context_fill_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_fill_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_draw
</UL>

<P><STRONG><a name="[18e]"></a>_gx_widget_create</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gx_widget_create.o(.text._gx_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
</UL>

<P><STRONG><a name="[171]"></a>_gx_widget_delete</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, gx_widget_delete.o(.text._gx_widget_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gx_widget_delete &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_list_remove
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_remove
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_free
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
</UL>

<P><STRONG><a name="[16c]"></a>_gx_widget_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gx_widget_detach.o(.text._gx_widget_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _gx_widget_detach &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_screen_stack_push
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[cc]"></a>_gx_widget_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_widget_draw.o(.text._gx_widget_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _gx_widget_draw &rArr; _gx_widget_background_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_background_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_widget_create.o(.text._gx_widget_create)
</UL>
<P><STRONG><a name="[242]"></a>_gx_widget_draw_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_widget_draw_set.o(.text._gx_widget_draw_set))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_draw_set
</UL>

<P><STRONG><a name="[191]"></a>_gx_widget_event_generate</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, gx_widget_event_generate.o(.text._gx_widget_event_generate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _gx_widget_event_generate &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_deselect
</UL>

<P><STRONG><a name="[cb]"></a>_gx_widget_event_process</STRONG> (Thumb, 746 bytes, Stack size 48 bytes, gx_widget_event_process.o(.text._gx_widget_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_widget_event_process &rArr; _gx_system_input_release &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_to_parent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_generate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_event_process
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_previous
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_widget_create.o(.text._gx_widget_create)
</UL>
<P><STRONG><a name="[245]"></a>_gx_widget_event_process_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gx_widget_event_process_set.o(.text._gx_widget_event_process_set))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process_set
</UL>

<P><STRONG><a name="[193]"></a>_gx_widget_event_to_parent</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_event_to_parent.o(.text._gx_widget_event_to_parent))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_event_process
</UL>

<P><STRONG><a name="[224]"></a>_gx_widget_fill_color_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gx_widget_fill_color_set.o(.text._gx_widget_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_widget_fill_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_fill_color_set
</UL>

<P><STRONG><a name="[222]"></a>_gx_widget_focus_next</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gx_widget_focus_next.o(.text._gx_widget_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_widget_focus_next &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[223]"></a>_gx_widget_focus_previous</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gx_widget_focus_previous.o(.text._gx_widget_focus_previous))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _gx_widget_focus_previous &rArr; _gx_system_focus_claim
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>

<P><STRONG><a name="[220]"></a>_gx_widget_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_widget_free.o(.text._gx_widget_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_widget_free
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
</UL>

<P><STRONG><a name="[195]"></a>_gx_widget_front_move</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, gx_widget_front_move.o(.text._gx_widget_front_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gx_widget_front_move &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_select
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[216]"></a>_gx_widget_height_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_height_get.o(.text._gx_widget_height_get))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[16b]"></a>_gx_widget_hide</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, gx_widget_hide.o(.text._gx_widget_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>

<P><STRONG><a name="[190]"></a>_gx_widget_link</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gx_widget_link.o(.text._gx_widget_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_create
</UL>

<P><STRONG><a name="[226]"></a>_gx_widget_nav_order_initialize</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, gx_widget_nav_order_initialize.o(.text._gx_widget_nav_order_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_widget_nav_order_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[180]"></a>_gx_widget_resize</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, gx_widget_resize.o(.text._gx_widget_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _gx_widget_resize &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_inside_detect
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_compare
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking_start
</UL>

<P><STRONG><a name="[229]"></a>_gx_widget_scroll_shift</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, gx_widget_scroll_shift.o(.text._gx_widget_scroll_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gx_widget_scroll_shift &rArr; _gx_system_dirty_entry_shift &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_entry_shift
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>

<P><STRONG><a name="[16d]"></a>_gx_widget_shift</STRONG> (Thumb, 398 bytes, Stack size 88 bytes, gx_widget_shift.o(.text._gx_widget_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_shift
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_combine
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_fold
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_resize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_complete
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_slide_landing
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_tracking
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_update
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[227]"></a>_gx_widget_show</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gx_widget_show.o(.text._gx_widget_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gx_widget_show &rArr; _gx_widget_clipping_update &rArr; _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_views_free
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_clipping_update
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_show
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
</UL>

<P><STRONG><a name="[18f]"></a>_gx_widget_status_add</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gx_widget_status_add.o(.text._gx_widget_status_add))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_capture
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_button_create
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_transparent_detect
</UL>

<P><STRONG><a name="[202]"></a>_gx_widget_status_remove</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_status_remove.o(.text._gx_widget_status_remove))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_input_release
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_status_remove
</UL>

<P><STRONG><a name="[1e8]"></a>_gx_widget_transparent_pixelmap_detect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gx_widget_transparent_pixelmap_detect.o(.text._gx_widget_transparent_pixelmap_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gx_widget_transparent_pixelmap_detect &rArr; _gx_widget_canvas_get
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_transparent_detect
</UL>

<P><STRONG><a name="[21e]"></a>_gx_widget_unlink</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, gx_widget_unlink.o(.text._gx_widget_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_delete
</UL>

<P><STRONG><a name="[215]"></a>_gx_widget_width_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gx_widget_width_get.o(.text._gx_widget_width_get))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>

<P><STRONG><a name="[22a]"></a>_gx_window_background_draw</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gx_window_background_draw.o(.text._gx_window_background_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gx_window_background_draw &rArr; _gx_window_border_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_border_draw
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_draw
</UL>

<P><STRONG><a name="[22b]"></a>_gx_window_border_draw</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gx_window_border_draw.o(.text._gx_window_border_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _gx_window_border_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_draw
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_draw
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_pixelmap_tile
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_context_pixelmap_get
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_context_fill_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_background_draw
</UL>

<P><STRONG><a name="[22c]"></a>_gx_window_create</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, gx_window_create.o(.text._gx_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_link
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_create
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_client_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_border_width_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_create
</UL>

<P><STRONG><a name="[cd]"></a>_gx_window_draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gx_window_draw.o(.text._gx_window_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _gx_window_draw &rArr; _gx_window_background_draw &rArr; _gx_window_border_draw &rArr; _gx_widget_border_draw &rArr; _gx_canvas_rectangle_draw &rArr; _gx_canvas_line_draw &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_children_draw
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_background_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[ce]"></a>_gx_window_event_process</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, gx_window_event_process.o(.text._gx_window_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_detach
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_focus_claim
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_nav_order_initialize
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_child_focus_assign
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_view_update_detect
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_scroll
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_event_process
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[22e]"></a>_gx_window_root_create</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, gx_window_root_create.o(.text._gx_window_root_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_root_create
</UL>

<P><STRONG><a name="[d0]"></a>_gx_window_root_event_process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gx_window_root_event_process.o(.text._gx_window_root_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _gx_window_root_event_process &rArr; _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_shift
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_window_root_create.o(.text._gx_window_root_create)
</UL>
<P><STRONG><a name="[21a]"></a>_gx_window_root_find</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gx_window_root_find.o(.text._gx_window_root_find))
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_find
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_canvas_get
</UL>

<P><STRONG><a name="[22d]"></a>_gx_window_scroll</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, gx_window_scroll.o(.text._gx_window_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_window_scroll &rArr; _gx_widget_scroll_shift &rArr; _gx_system_dirty_entry_shift &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_scroll_shift
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_partial_add
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_block_move
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[cf]"></a>_gx_window_scroll_info_get</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, gx_window_scroll_info_get.o(.text._gx_window_scroll_info_get))
<BR>[Address Reference Count : 1]<UL><LI> gx_window_create.o(.text._gx_window_create)
</UL>
<P><STRONG><a name="[225]"></a>_gx_window_view_update_detect</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gx_window_view_update_detect.o(.text._gx_window_view_update_detect))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_shift
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_hide
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_front_move
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>

<P><STRONG><a name="[22f]"></a>_gx_window_wallpaper_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gx_window_wallpaper_set.o(.text._gx_window_wallpaper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_window_wallpaper_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_dirty_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_wallpaper_set
</UL>

<P><STRONG><a name="[111]"></a>_gxe_animation_create</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gxe_animation_create.o(.text._gxe_animation_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _gxe_animation_create &rArr; _gx_animation_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_create
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[230]"></a>_gxe_animation_drag_disable</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, gxe_animation_drag_disable.o(.text._gxe_animation_drag_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gxe_animation_drag_disable &rArr; _gx_animation_drag_disable &rArr; _gx_animation_stop &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_win_event_process
</UL>

<P><STRONG><a name="[112]"></a>_gxe_animation_drag_enable</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gxe_animation_drag_enable.o(.text._gxe_animation_drag_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_animation_drag_enable &rArr; _gx_animation_drag_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_drag_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_win_event_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[232]"></a>_gxe_canvas_create</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, gxe_canvas_create.o(.text._gxe_canvas_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _gxe_canvas_create &rArr; _gx_canvas_create &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_canvas_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[233]"></a>_gxe_display_active_language_set</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, gxe_display_active_language_set.o(.text._gxe_display_active_language_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _gxe_display_active_language_set &rArr; _gx_display_active_language_set &rArr; _gx_system_all_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_active_language_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[234]"></a>_gxe_display_color_table_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gxe_display_color_table_set.o(.text._gxe_display_color_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gxe_display_color_table_set &rArr; _gx_display_color_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_color_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[235]"></a>_gxe_display_create</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gxe_display_create.o(.text._gxe_display_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _gxe_display_create &rArr; _gx_display_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[236]"></a>_gxe_display_font_table_set</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gxe_display_font_table_set.o(.text._gxe_display_font_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gxe_display_font_table_set &rArr; _gx_display_font_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_font_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[237]"></a>_gxe_display_language_table_set_ext</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, gxe_display_language_table_set.o(.text._gxe_display_language_table_set_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gxe_display_language_table_set_ext &rArr; _gx_display_language_table_set_ext &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_string_length_check
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_language_table_set_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[238]"></a>_gxe_display_pixelmap_table_set</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, gxe_display_pixelmap_table_set.o(.text._gxe_display_pixelmap_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _gxe_display_pixelmap_table_set &rArr; _gx_display_pixelmap_table_set &rArr; _gx_display_canvas_dirty
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_pixelmap_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[239]"></a>_gxe_menu_insert</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gxe_menu_insert.o(.text._gxe_menu_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _gxe_menu_insert &rArr; _gx_menu_insert &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_menu_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[23a]"></a>_gxe_pixelmap_button_create</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, gxe_pixelmap_button_create.o(.text._gxe_pixelmap_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _gxe_pixelmap_button_create &rArr; _gx_pixelmap_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_pixelmap_button_create
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_pixelmap_button_create
</UL>

<P><STRONG><a name="[15c]"></a>_gxe_system_event_send</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gxe_system_event_send.o(.text._gxe_system_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gxe_system_event_send &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchDrive
</UL>

<P><STRONG><a name="[10d]"></a>_gxe_system_initialize</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gxe_system_initialize.o(.text._gxe_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _gxe_system_initialize &rArr; _gx_system_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[10c]"></a>_gxe_system_memory_allocator_set</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gxe_system_memory_allocator_set.o(.text._gxe_system_memory_allocator_set))
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_memory_allocator_set
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[23c]"></a>_gxe_system_scroll_appearance_set</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gxe_system_scroll_appearance_set.o(.text._gxe_system_scroll_appearance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_system_scroll_appearance_set &rArr; _gx_system_scroll_appearance_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_scroll_appearance_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[114]"></a>_gxe_system_start</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gxe_system_start.o(.text._gxe_system_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _gxe_system_start &rArr; _gx_system_start &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[23e]"></a>_gxe_utility_rectangle_define</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gxe_utility_rectangle_define.o(.text._gxe_utility_rectangle_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gxe_utility_rectangle_define &rArr; _gx_utility_rectangle_define
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_define
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_24xrgb_buffer_toggle
</UL>

<P><STRONG><a name="[23f]"></a>_gxe_utility_rectangle_overlap_detect</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, gxe_utility_rectangle_overlap_detect.o(.text._gxe_utility_rectangle_overlap_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_utility_rectangle_overlap_detect &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_overlap_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4_24xrgb_buffer_toggle
</UL>

<P><STRONG><a name="[240]"></a>_gxe_widget_allocate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gxe_widget_allocate.o(.text._gxe_widget_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_widget_allocate &rArr; _gx_widget_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[110]"></a>_gxe_widget_attach</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, gxe_widget_attach.o(.text._gxe_widget_attach))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _gxe_widget_attach &rArr; _gx_widget_attach &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[241]"></a>_gxe_widget_draw_set</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gxe_widget_draw_set.o(.text._gxe_widget_draw_set))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_draw_set
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[243]"></a>_gxe_widget_event_process</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gxe_widget_event_process.o(.text._gxe_widget_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gxe_widget_event_process &rArr; _gx_widget_event_process &rArr; _gx_system_input_release &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_win_event_process
</UL>

<P><STRONG><a name="[244]"></a>_gxe_widget_event_process_set</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gxe_widget_event_process_set.o(.text._gxe_widget_event_process_set))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_event_process_set
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[246]"></a>_gxe_widget_fill_color_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gxe_widget_fill_color_set.o(.text._gxe_widget_fill_color_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_widget_fill_color_set &rArr; _gx_widget_fill_color_set
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_fill_color_set
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[113]"></a>_gxe_widget_show</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gxe_widget_show.o(.text._gxe_widget_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _gxe_widget_show &rArr; _gx_widget_show &rArr; _gx_widget_clipping_update &rArr; _gx_widget_child_clipping_update &rArr; _gx_utility_rectangle_overlap_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_show
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[247]"></a>_gxe_widget_status_remove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gxe_widget_status_remove.o(.text._gxe_widget_status_remove))
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_widget_status_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>

<P><STRONG><a name="[248]"></a>_gxe_window_create</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, gxe_window_create.o(.text._gxe_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _gxe_window_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_create
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_window_create
</UL>

<P><STRONG><a name="[249]"></a>_gxe_window_event_process</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, gxe_window_event_process.o(.text._gxe_window_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _gxe_window_event_process &rArr; _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_event_process
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slide_win_event_process
</UL>

<P><STRONG><a name="[24a]"></a>_gxe_window_root_create</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gxe_window_root_create.o(.text._gxe_window_root_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_root_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_display_configure
</UL>

<P><STRONG><a name="[24b]"></a>_gxe_window_wallpaper_set</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, gxe_window_wallpaper_set.o(.text._gxe_window_wallpaper_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gxe_window_wallpaper_set &rArr; _gx_window_wallpaper_set
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_window_wallpaper_set
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_window_create
</UL>

<P><STRONG><a name="[24c]"></a>_tx_block_allocate</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, tx_block_allocate.o(.text._tx_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_block_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
</UL>

<P><STRONG><a name="[d1]"></a>_tx_block_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_block_pool_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_block_allocate.o(.text._tx_block_allocate)
<LI> tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup)
</UL>
<P><STRONG><a name="[24f]"></a>_tx_block_pool_create</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, tx_block_pool_create.o(.text._tx_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
</UL>

<P><STRONG><a name="[250]"></a>_tx_block_release</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tx_block_release.o(.text._tx_block_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_block_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_release
</UL>

<P><STRONG><a name="[251]"></a>_tx_byte_allocate</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[d2]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_byte_pool_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_byte_allocate.o(.text._tx_byte_allocate)
<LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[253]"></a>_tx_byte_pool_create</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_byte_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[252]"></a>_tx_byte_pool_search</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
</UL>

<P><STRONG><a name="[254]"></a>_tx_byte_release</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tx_byte_release.o(.text._tx_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_byte_release &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
</UL>

<P><STRONG><a name="[256]"></a>_tx_initialize_high_level</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[151]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
</UL>

<P><STRONG><a name="[d3]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_mutex_get.o(.text._tx_mutex_get)
<LI> tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
</UL>
<P><STRONG><a name="[200]"></a>_tx_mutex_create</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_mutex_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[204]"></a>_tx_mutex_get</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>

<P><STRONG><a name="[25d]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_mutex_prioritize
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[25c]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>

<P><STRONG><a name="[20f]"></a>_tx_mutex_put</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_unlock
</UL>

<P><STRONG><a name="[d4]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[d5]"></a>_tx_queue_cleanup</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tx_queue_cleanup.o(.text._tx_queue_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_queue_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tx_queue_cleanup.o(.text._tx_queue_cleanup)
<LI> tx_queue_receive.o(.text._tx_queue_receive)
<LI> tx_queue_send.o(.text._tx_queue_send)
</UL>
<P><STRONG><a name="[1ff]"></a>_tx_queue_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tx_queue_create.o(.text._tx_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_queue_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[20b]"></a>_tx_queue_receive</STRONG> (Thumb, 956 bytes, Stack size 40 bytes, tx_queue_receive.o(.text._tx_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_queue_receive &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_thread_entry
</UL>

<P><STRONG><a name="[1f8]"></a>_tx_queue_send</STRONG> (Thumb, 540 bytes, Stack size 24 bytes, tx_queue_send.o(.text._tx_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_event_send
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
</UL>

<P><STRONG><a name="[201]"></a>_tx_thread_create</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[203]"></a>_tx_thread_identify</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_lock
</UL>

<P><STRONG><a name="[257]"></a>_tx_thread_initialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[20a]"></a>_tx_thread_resume</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tx_thread_resume.o(.text._tx_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_start
</UL>

<P><STRONG><a name="[d7]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[116]"></a>_tx_thread_sleep</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTASK
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[255]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[24e]"></a>_tx_thread_system_resume</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_release
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_cleanup
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_cleanup
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
</UL>

<P><STRONG><a name="[24d]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_allocate
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[f4]"></a>_tx_thread_time_slice</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[d6]"></a>_tx_thread_timeout</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[205]"></a>_tx_time_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_init
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_flick_test
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_pen_speed_update
</UL>

<P><STRONG><a name="[20e]"></a>_tx_timer_activate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tx_timer_activate.o(.text._tx_timer_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_timer_activate
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>

<P><STRONG><a name="[1fe]"></a>_tx_timer_create</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_timer_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_initialize
</UL>

<P><STRONG><a name="[185]"></a>_tx_timer_deactivate</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, tx_timer_deactivate.o(.text._tx_timer_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_timer_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_stop
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_animation_stop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_expiration
</UL>

<P><STRONG><a name="[f3]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[20d]"></a>_tx_timer_info_get</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, tx_timer_info_get.o(.text._tx_timer_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_timer_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_system_timer_start
</UL>

<P><STRONG><a name="[258]"></a>_tx_timer_initialize</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[260]"></a>_tx_timer_system_activate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_activate
</UL>

<P><STRONG><a name="[25f]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[d8]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[154]"></a>_txe_block_allocate</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, txe_block_allocate.o(.text._txe_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_block_allocate &rArr; _tx_block_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[164]"></a>_txe_block_pool_create</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, txe_block_pool_create.o(.text._txe_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_block_pool_create &rArr; _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[166]"></a>_txe_block_release</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, txe_block_release.o(.text._txe_block_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_block_release &rArr; _tx_block_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[153]"></a>_txe_byte_allocate</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_allocate
</UL>

<P><STRONG><a name="[10b]"></a>_txe_byte_pool_create</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_byte_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[165]"></a>_txe_byte_release</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, txe_byte_release.o(.text._txe_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _txe_byte_release &rArr; _tx_byte_release &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_free
</UL>

<P><STRONG><a name="[118]"></a>_txe_thread_create</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1TaskCreate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTaskCreate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_TaskCreate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDLETaskCreate
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskCreate
</UL>

<P><STRONG><a name="[10e]"></a>gx_studio_display_configure</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, guiapp_specifications.o(.text.gx_studio_display_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gx_studio_display_configure &rArr; _gxe_window_root_create &rArr; _gx_window_root_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_canvas_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_active_language_set
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_color_table_set
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_language_table_set_ext
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_font_table_set
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_display_pixelmap_table_set
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_system_scroll_appearance_set
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_root_create
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[10f]"></a>gx_studio_named_widget_create</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, guiapp_specifications.o(.text.gx_studio_named_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gx_studio_named_widget_create &rArr; gx_studio_nested_widget_create &rArr;  gx_studio_nested_widget_create (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_attach
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_Task
</UL>

<P><STRONG><a name="[db]"></a>gx_studio_pixelmap_button_create</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, guiapp_specifications.o(.text.gx_studio_pixelmap_button_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gx_studio_pixelmap_button_create &rArr; _gxe_pixelmap_button_create &rArr; _gx_pixelmap_button_create &rArr; _gx_button_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_pixelmap_button_create
</UL>
<BR>[Address Reference Count : 20]<UL><LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_7_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_6_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_5_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_4_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_3_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_2_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_1_define)
<LI> guiapp_specifications.o(.rodata.window_2_pixelmap_button_12_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_11_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_10_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_9_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_8_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_7_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_6_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_5_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_4_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_3_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_2_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_1_define)
<LI> guiapp_specifications.o(.rodata.window_1_pixelmap_button_define)
</UL>
<P><STRONG><a name="[da]"></a>gx_studio_window_create</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_window_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gx_studio_window_create &rArr; _gxe_window_create &rArr; _gx_window_create &rArr; _gx_widget_create &rArr; _gx_widget_link &rArr; _gx_widget_unlink &rArr; _gx_widget_hide &rArr; _gx_system_dirty_partial_add &rArr; _gx_system_unlock &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_create
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_wallpaper_set
</UL>
<BR>[Address Reference Count : 3]<UL><LI> guiapp_specifications.o(.rodata.window_2_define)
<LI> guiapp_specifications.o(.rodata.window_1_define)
<LI> guiapp_specifications.o(.rodata.window_define)
</UL>
<P><STRONG><a name="[e7]"></a>main</STRONG> (Thumb, 726 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAM_Initialization_Sequence
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDRAM_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_Init
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA2D_ConfigLayer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[66]"></a>memory_allocate</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gx_task.o(.text.memory_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memory_allocate &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_task.o(.text.GX_Task)
</UL>
<P><STRONG><a name="[67]"></a>memory_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gx_task.o(.text.memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memory_free &rArr; _txe_byte_release &rArr; _tx_byte_release &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_task.o(.text.GX_Task)
</UL>
<P><STRONG><a name="[dc]"></a>slide_win_event_process</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, gx_task.o(.text.slide_win_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = slide_win_event_process &rArr; _gxe_window_event_process &rArr; _gx_window_event_process &rArr; _gx_widget_shift &rArr; _gx_system_event_fold &rArr; _gx_system_event_send &rArr; _gx_system_pen_flick_test &rArr; _tx_queue_send &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_window_event_process
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_drag_enable
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_animation_drag_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiapp_specifications.o(.rodata.window_define)
</UL>
<P><STRONG><a name="[68]"></a>stm32f4_graphics_driver_setup_24xrgb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, f429_gx_drive.o(.text.stm32f4_graphics_driver_setup_24xrgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stm32f4_graphics_driver_setup_24xrgb &rArr; _gx_display_driver_32argb_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_32argb_setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_task.o(.text.GX_Task)
</UL>
<P><STRONG><a name="[25a]"></a>tx_application_define</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_azure_rtos.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[e1]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2a1]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2a2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6c]"></a>LEDTASK</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ledtask.o(.text.LEDTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDTASK &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledtask.o(.text.LEDTaskCreate)
</UL>
<P><STRONG><a name="[6b]"></a>IDLETASK</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text.IDLETASK))
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.IDLETaskCreate)
</UL>
<P><STRONG><a name="[6d]"></a>SYSTASK</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, systask.o(.text.SYSTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SYSTASK &rArr; UART1TaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1TaskCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GX_TaskCreate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDLETaskCreate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskCreate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systask.o(.text.SYSTaskCreate)
</UL>
<P><STRONG><a name="[6e]"></a>UARTTASK</STRONG> (Thumb, 184 bytes, Stack size 520 bytes, uart.o(.text.UARTTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = UARTTASK &rArr; _txe_block_pool_create &rArr; _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_release
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text.UART1TaskCreate)
</UL>
<P><STRONG><a name="[127]"></a>LTDC_SetConfig</STRONG> (Thumb, 288 bytes, Stack size 20 bytes, stm32f4xx_hal_ltdc.o(.text.LTDC_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LTDC_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LTDC_ConfigLayer
</UL>

<P><STRONG><a name="[6a]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[144]"></a>UART_Receive_IT</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>UART_SetConfig</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d9]"></a>stm32f4_24xrgb_buffer_toggle</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, f429_gx_drive.o(.text.stm32f4_24xrgb_buffer_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stm32f4_24xrgb_buffer_toggle &rArr; _gxe_utility_rectangle_define &rArr; _gx_utility_rectangle_define
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_overlap_detect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_utility_rectangle_define
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> f429_gx_drive.o(.text.stm32f4_graphics_driver_setup_24xrgb)
</UL>
<P><STRONG><a name="[74]"></a>_gx_display_driver_24xrgb_mcu_draw</STRONG> (Thumb, 298 bytes, Stack size 60 bytes, gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_mcu_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _gx_display_driver_24xrgb_mcu_draw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_display_driver_24xrgb_jpeg_draw.o(.text._gx_display_driver_24xrgb_jpeg_draw)
</UL>
<P><STRONG><a name="[1c5]"></a>_gx_display_driver_generic_simple_aliased_wide_arc_draw</STRONG> (Thumb, 3062 bytes, Stack size 216 bytes, gx_display_driver_generic_aliased_wide_arc_draw.o(.text._gx_display_driver_generic_simple_aliased_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _gx_display_driver_generic_simple_aliased_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_math_sqrt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_aliased_wide_arc_draw
</UL>

<P><STRONG><a name="[1ca]"></a>_gx_display_driver_generic_simple_wide_arc_draw</STRONG> (Thumb, 2016 bytes, Stack size 176 bytes, gx_display_driver_generic_wide_arc_draw.o(.text._gx_display_driver_generic_simple_wide_arc_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _gx_display_driver_generic_simple_wide_arc_draw &rArr; _gx_display_driver_arc_clipping_get &rArr; _gx_utility_circle_point_get &rArr; _gx_utility_math_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_rectangle_point_detect
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_utility_circle_point_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_arc_clipping_get
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_display_driver_generic_wide_arc_draw
</UL>

<P><STRONG><a name="[a1]"></a>_gx_image_reader_one_row_convert</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_one_row_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
</UL>
<P><STRONG><a name="[a2]"></a>_gx_image_reader_one_row_dither</STRONG> (Thumb, 580 bytes, Stack size 80 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_dither))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _gx_image_reader_one_row_dither &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
</UL>
<P><STRONG><a name="[a0]"></a>_gx_image_reader_one_row_rotated_convert</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gx_image_reader_colorspace_convert.o(.text._gx_image_reader_one_row_rotated_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_one_row_rotated_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_colorspace_convert.o(.text._gx_image_reader_colorspace_convert)
</UL>
<P><STRONG><a name="[1d6]"></a>_gx_image_reader_jpeg_decode_blocks</STRONG> (Thumb, 4012 bytes, Stack size 120 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_decode_blocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 900<LI>Call Chain = _gx_image_reader_jpeg_decode_blocks &rArr; _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_mcu_decode
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode
</UL>

<P><STRONG><a name="[1d8]"></a>_gx_image_reader_jpeg_huffcode_find</STRONG> (Thumb, 548 bytes, Stack size 20 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_huffcode_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_one_block_decode
</UL>

<P><STRONG><a name="[1d7]"></a>_gx_image_reader_jpeg_one_block_decode</STRONG> (Thumb, 6006 bytes, Stack size 760 bytes, gx_image_reader_jpeg_decode.o(.text._gx_image_reader_jpeg_one_block_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = _gx_image_reader_jpeg_one_block_decode &rArr; _gx_image_reader_jpeg_huffcode_find
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_huffcode_find
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_jpeg_decode_blocks
</UL>

<P><STRONG><a name="[a8]"></a>_gx_image_reader_1555xrgb_pixel_read</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_1555xrgb_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b0]"></a>_gx_image_reader_16bit_gray_alpha_read</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_alpha_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[af]"></a>_gx_image_reader_16bit_gray_read</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_16bit_gray_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a3]"></a>_gx_image_reader_1bit_pixel_read</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_1bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a5]"></a>_gx_image_reader_1bpp_pixel_read</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b7]"></a>_gx_image_reader_1bpp_transparent_read</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_1bpp_transparent_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b2]"></a>_gx_image_reader_24bit_pixel_read</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_24bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_24bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ac]"></a>_gx_image_reader_2bit_pixel_read</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_2bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_2bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a4]"></a>_gx_image_reader_32argb_pixel_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32argb_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b1]"></a>_gx_image_reader_32bit_gray_alpha_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_gray_alpha_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b3]"></a>_gx_image_reader_32bit_pixel_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_32bit_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[aa]"></a>_gx_image_reader_4444argb_pixel_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4444argb_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b4]"></a>_gx_image_reader_48bit_pixel_read</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_48bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_48bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a7]"></a>_gx_image_reader_4bit_grayscale_pixel_read</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a6]"></a>_gx_image_reader_4bit_grayscale_transparent_read</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ad]"></a>_gx_image_reader_4bit_pixel_read</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_4bit_pixel_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_4bit_pixel_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[a9]"></a>_gx_image_reader_565rgb_pixel_read</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_565rgb_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b5]"></a>_gx_image_reader_64bit_pixel_read</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_64bit_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ab]"></a>_gx_image_reader_8bit_alpha_read</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_alpha_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[b6]"></a>_gx_image_reader_8bit_palette_pixel_read</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_palette_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[ae]"></a>_gx_image_reader_8bit_pixel_read</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_8bit_pixel_read))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_read_callback_set.o(.text._gx_image_reader_pixel_read_callback_set)
</UL>
<P><STRONG><a name="[c1]"></a>_gx_image_reader_1555xrgb_pixel_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1555xrgb_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c6]"></a>_gx_image_reader_1555xrgb_rle_pixel_write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_1555xrgb_rle_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_1555xrgb_rle_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[b9]"></a>_gx_image_reader_24xrgb_pixel_write</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_24xrgb_pixel_write))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c0]"></a>_gx_image_reader_32argb_pixel_write</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_32argb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _gx_image_reader_32argb_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[bf]"></a>_gx_image_reader_4444argb_pixel_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_4444argb_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c5]"></a>_gx_image_reader_4444argb_transparent_write</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4444argb_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _gx_image_reader_4444argb_transparent_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[bd]"></a>_gx_image_reader_4bit_grayscale_pixel_write</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_4bit_grayscale_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rgb2gray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[bc]"></a>_gx_image_reader_4bit_grayscale_transparent_write</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_4bit_grayscale_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_4bit_grayscale_transparent_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rgb2gray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c3]"></a>_gx_image_reader_565rgb_pixel_write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_565rgb_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c2]"></a>_gx_image_reader_565rgb_rle_pixel_write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rle_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_565rgb_rle_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[b8]"></a>_gx_image_reader_565rgb_rotated_pixel_write</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_565rgb_rotated_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_565rgb_rotated_pixel_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[c4]"></a>_gx_image_reader_8bit_alpha_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_alpha_write))
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[be]"></a>_gx_image_reader_8bit_palette_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_8bit_palette_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _gx_image_reader_8bit_palette_write &rArr; _gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_nearest_palette_color_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[bb]"></a>_gx_image_reader_monochrome_pixel_write</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_pixel_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_monochrome_pixel_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rgb2gray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[ba]"></a>_gx_image_reader_monochrome_transparent_write</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_monochrome_transparent_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _gx_image_reader_monochrome_transparent_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rgb2gray
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gx_image_reader_pixel_write_callback_set.o(.text._gx_image_reader_pixel_write_callback_set)
</UL>
<P><STRONG><a name="[1db]"></a>_gx_image_reader_png_bits_get</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_bits_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _gx_image_reader_png_bits_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_huffcode_decode
</UL>

<P><STRONG><a name="[1dc]"></a>_gx_image_reader_png_huffcode_decode</STRONG> (Thumb, 1578 bytes, Stack size 96 bytes, gx_image_reader_png_decode.o(.text._gx_image_reader_png_huffcode_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _gx_image_reader_png_huffcode_decode &rArr; _gx_image_reader_png_bits_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_bits_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_png_decode
</UL>

<P><STRONG><a name="[1e1]"></a>_gx_image_reader_rle_count_write</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_count_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _gx_image_reader_rle_count_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_one_row_encode
</UL>

<P><STRONG><a name="[1df]"></a>_gx_image_reader_rle_one_row_encode</STRONG> (Thumb, 500 bytes, Stack size 64 bytes, gx_image_reader_rle_encode.o(.text._gx_image_reader_rle_one_row_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _gx_image_reader_rle_one_row_encode &rArr; _gx_image_reader_rle_count_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_count_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode_size_get
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gx_image_reader_rle_encode
</UL>

<P><STRONG><a name="[262]"></a>gx_studio_nested_widget_create</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, guiapp_specifications.o(.text.gx_studio_nested_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + In Cycle
<LI>Call Chain = gx_studio_nested_widget_create &rArr;  gx_studio_nested_widget_create (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_menu_insert
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_allocate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_fill_color_set
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_event_process_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_draw_set
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gxe_widget_status_remove
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_named_widget_create
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gx_studio_nested_widget_create
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
