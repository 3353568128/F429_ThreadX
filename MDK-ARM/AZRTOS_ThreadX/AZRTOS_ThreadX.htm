<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [AZRTOS_ThreadX\AZRTOS_ThreadX.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image AZRTOS_ThreadX\AZRTOS_ThreadX.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Wed Oct 13 14:38:40 2021
<BR><P>
<H3>Maximum Stack Usage =        864 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SDTASK &rArr; _fxe_file_create &rArr; _fx_file_create &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9c]">__user_initial_stackheap</a>
 <LI><a href="#[162]">_tx_initialize_low_level</a>
 <LI><a href="#[8d]">__tx_BadHandler</a>
 <LI><a href="#[8e]">__tx_HardfaultHandler</a>
 <LI><a href="#[8f]">__tx_SVCallHandler</a>
 <LI><a href="#[1e1]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[1e2]">__tx_SysTickHandler</a>
 <LI><a href="#[91]">__tx_NMIHandler</a>
 <LI><a href="#[92]">__tx_DBGHandler</a>
 <LI><a href="#[164]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[1e3]">__tx_PendSVHandler</a>
 <LI><a href="#[1e4]">tx_thread_fpu_disable</a>
 <LI><a href="#[1e5]">tx_thread_fpu_enable</a>
 <LI><a href="#[16b]">_tx_thread_stack_build</a>
 <LI><a href="#[90]">_tx_timer_interrupt</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[69]">F429_SD_SDIO_driver</a> from sdio_drive.o(.text.F429_SD_SDIO_driver) referenced 2 times from sdtask.o(.text.SDTASK)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">IDLETASK</a> from idle.o(.text.IDLETASK) referenced 2 times from idle.o(.text.IDLETaskCreate)
 <LI><a href="#[68]">LEDTASK</a> from ledtask.o(.text.LEDTASK) referenced 2 times from ledtask.o(.text.LEDTaskCreate)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6a]">SDTASK</a> from sdtask.o(.text.SDTASK) referenced 2 times from sdtask.o(.text.SDTaskCreate)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6b]">SYSTASK</a> from systask.o(.text.SYSTASK) referenced 2 times from systask.o(.text.SYSTaskCreate)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(.text.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6c]">UARTTASK</a> from uart.o(.text.UARTTASK) referenced 2 times from uart.o(.text.UART1TaskCreate)
 <LI><a href="#[66]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[71]">USBTASK</a> from app_usbx_device.o(.text.USBTASK) referenced 2 times from app_usbx_device.o(.text.USBTaskCreate)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[72]">_fx_system_timer_entry</a> from fx_system_timer_entry.o(.text._fx_system_timer_entry) referenced 2 times from fx_system_initialize.o(.text._fx_system_initialize)
 <LI><a href="#[73]">_tx_block_pool_cleanup</a> from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup) referenced 2 times from tx_block_allocate.o(.text._tx_block_allocate)
 <LI><a href="#[73]">_tx_block_pool_cleanup</a> from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup) referenced 2 times from tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup)
 <LI><a href="#[74]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_allocate.o(.text._tx_byte_allocate)
 <LI><a href="#[74]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[75]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
 <LI><a href="#[75]">_tx_mutex_cleanup</a> from tx_mutex_cleanup.o(.text._tx_mutex_cleanup) referenced 2 times from tx_mutex_get.o(.text._tx_mutex_get)
 <LI><a href="#[76]">_tx_mutex_thread_release</a> from tx_mutex_cleanup.o(.text._tx_mutex_thread_release) referenced 2 times from tx_mutex_create.o(.text._tx_mutex_create)
 <LI><a href="#[77]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
 <LI><a href="#[77]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[79]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[78]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[7a]">_tx_timer_thread_entry</a> from tx_timer_thread_entry.o(.text._tx_timer_thread_entry) referenced 4 times from tx_timer_initialize.o(.text._tx_timer_initialize)
 <LI><a href="#[7b]">_ux_dcd_stm32_function</a> from ux_dcd_stm32_function.o(.text._ux_dcd_stm32_function) referenced 2 times from ux_dcd_stm32_initialize.o(.text._ux_dcd_stm32_initialize)
 <LI><a href="#[70]">_ux_device_class_storage_entry</a> from ux_device_class_storage_entry.o(.text._ux_device_class_storage_entry) referenced 2 times from app_usbx_device.o(.text.USBTASK)
 <LI><a href="#[7c]">_ux_device_class_storage_thread</a> from ux_device_class_storage_thread.o(.text._ux_device_class_storage_thread) referenced 2 times from ux_device_class_storage_initialize.o(.text._ux_device_class_storage_initialize)
 <LI><a href="#[6d]">app_usb_device_thread_media_read</a> from ux_device_msc.o(.text.app_usb_device_thread_media_read) referenced 2 times from app_usbx_device.o(.text.USBTASK)
 <LI><a href="#[6f]">app_usb_device_thread_media_status</a> from ux_device_msc.o(.text.app_usb_device_thread_media_status) referenced 2 times from app_usbx_device.o(.text.USBTASK)
 <LI><a href="#[6e]">app_usb_device_thread_media_write</a> from ux_device_msc.o(.text.app_usb_device_thread_media_write) referenced 2 times from app_usbx_device.o(.text.USBTASK)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1bd]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1be]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1bf]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1c0]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[1c1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[85]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[80]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[8a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d7]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1d8]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d9]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1da]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1db]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1dc]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1dd]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[82]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[84]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1de]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[86]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1df]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[89]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[8b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[162]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8d]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[8e]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[8f]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[1e1]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e2]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[92]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[164]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e3]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[90]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfDec
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_String_Framework
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_Language_Id_Framework
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfDec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
</UL>

<P><STRONG><a name="[95]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[13e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
</UL>

<P><STRONG><a name="[1e8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
</UL>

<P><STRONG><a name="[99]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[98]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[1ea]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1eb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[88]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1f0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>F429_SD_SDIO_driver</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, sdio_drive.o(.text.F429_SD_SDIO_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = F429_SD_SDIO_driver &rArr; MX_SDIO_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_partition_offset_calculate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdtask.o(.text.SDTASK)
</UL>
<P><STRONG><a name="[a2]"></a>HAL_DMA_Abort</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ff]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[c3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 442 bytes, Stack size 44 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTASK
</UL>

<P><STRONG><a name="[a3]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[f9]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[a5]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HAL_InitTick</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_MspInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a6]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[12f]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd_ex.o(.text.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[af]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_destroy
</UL>

<P><STRONG><a name="[b1]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_reset
</UL>

<P><STRONG><a name="[b3]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_create
</UL>

<P><STRONG><a name="[b5]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_transfer_request
</UL>

<P><STRONG><a name="[b8]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_stall
</UL>

<P><STRONG><a name="[bb]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_transfer_request
</UL>

<P><STRONG><a name="[bc]"></a>HAL_PCD_Init</STRONG> (Thumb, 316 bytes, Stack size 80 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(.text.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[c6]"></a>HAL_PCD_Start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[c9]"></a>HAL_PCD_Stop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(.text.HAL_PCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCD_Stop &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[126]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ac]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 872 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 388 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Check
</UL>

<P><STRONG><a name="[d6]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usb_device_thread_media_write
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usb_device_thread_media_read
</UL>

<P><STRONG><a name="[d8]"></a>HAL_SD_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
</UL>

<P><STRONG><a name="[da]"></a>HAL_SD_InitCard</STRONG> (Thumb, 530 bytes, Stack size 80 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SD_MspInit</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(.text.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_SD_ReadBlocks</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_ReadBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_ReadBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usb_device_thread_media_read
</UL>

<P><STRONG><a name="[eb]"></a>HAL_SD_WriteBlocks</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(.text.HAL_SD_WriteBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SD_WriteBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_usb_device_thread_media_write
</UL>

<P><STRONG><a name="[f5]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[fe]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1378 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_MspInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[103]"></a>HAL_UART_Transmit</STRONG> (Thumb, 722 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>IDLETaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, idle.o(.text.IDLETaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = IDLETaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[108]"></a>LEDTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, ledtask.o(.text.LEDTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = LEDTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[9f]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, main.o(.text.MX_SDIO_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_SDIO_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F429_SD_SDIO_driver
</UL>

<P><STRONG><a name="[109]"></a>MX_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.MX_ThreadX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>Printf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, uart.o(.text.Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Printf &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[10f]"></a>PrintfDec</STRONG> (Thumb, 568 bytes, Stack size 64 bytes, uart.o(.text.PrintfDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PrintfDec &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[111]"></a>PrintfHex</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, uart.o(.text.PrintfHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PrintfHex &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[e6]"></a>SDIO_ConfigData</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[df]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[d1]"></a>SDIO_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[d5]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[db]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_PowerState_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SDIO_PowerState_ON &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[e9]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[ee]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[d3]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[de]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[d0]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[d4]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[dc]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[dd]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdOperCond))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[e7]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[e8]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[e4]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[e1]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[e3]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[113]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[d7]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[e2]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdSetRelAdd))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[ea]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdStopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
</UL>

<P><STRONG><a name="[ec]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[ed]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
</UL>

<P><STRONG><a name="[11c]"></a>SDTaskCreate</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, sdtask.o(.text.SDTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SDTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[11b]"></a>SD_Check</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, sdio.o(.text.SD_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_Check &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[9e]"></a>SD_ReadDisk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdio.o(.text.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SD_ReadDisk &rArr; HAL_SD_ReadBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F429_SD_SDIO_driver
</UL>

<P><STRONG><a name="[a1]"></a>SD_WriteDisk</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdio.o(.text.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_WriteDisk &rArr; HAL_SD_WriteBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F429_SD_SDIO_driver
</UL>

<P><STRONG><a name="[11f]"></a>SYSTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, systask.o(.text.SYSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[120]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 88 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32f4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[11d]"></a>UART1TaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, uart.o(.text.UART1TaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART1TaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>USBD_Get_Device_Framework_Speed</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ux_device_descriptors.o(.text.USBD_Get_Device_Framework_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USBD_Get_Device_Framework_Speed &rArr; USBD_Device_Framework_Builder
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Device_Framework_Builder
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[129]"></a>USBD_Get_Language_Id_Framework</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ux_device_descriptors.o(.text.USBD_Get_Language_Id_Framework))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_Get_Language_Id_Framework &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[12a]"></a>USBD_Get_String_Framework</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, ux_device_descriptors.o(.text.USBD_Get_String_Framework))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_Get_String_Framework &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[11e]"></a>USBTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, app_usbx_device.o(.text.USBTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = USBTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
</UL>

<P><STRONG><a name="[b4]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[bf]"></a>USB_CoreInit</STRONG> (Thumb, 448 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[b0]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(.text.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[c8]"></a>USB_DevConnect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[c2]"></a>USB_DevDisconnect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
</UL>

<P><STRONG><a name="[c1]"></a>USB_DevInit</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, stm32f4xx_ll_usb.o(.text.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DevInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[be]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
</UL>

<P><STRONG><a name="[b7]"></a>USB_EP0StartXfer</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[ba]"></a>USB_EP0_OutStart</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_EP0_OutStart))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[b2]"></a>USB_EPClearStall</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[b9]"></a>USB_EPSetStall</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[b6]"></a>USB_EPStartXfer</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPStartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[c7]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[ca]"></a>USB_FlushTxFifo</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_ll_usb.o(.text.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
</UL>

<P><STRONG><a name="[c0]"></a>USB_SetCurrentMode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(.text.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[c5]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(.text.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>_fx_directory_entry_read</STRONG> (Thumb, 2348 bytes, Stack size 88 bytes, fx_directory_entry_read.o(.text._fx_directory_entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
</UL>

<P><STRONG><a name="[136]"></a>_fx_directory_entry_write</STRONG> (Thumb, 3162 bytes, Stack size 112 bytes, fx_directory_entry_write.o(.text._fx_directory_entry_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_write
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>

<P><STRONG><a name="[13a]"></a>_fx_directory_free_search</STRONG> (Thumb, 1406 bytes, Stack size 128 bytes, fx_directory_free_search.o(.text._fx_directory_free_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _fx_directory_free_search &rArr; _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
</UL>

<P><STRONG><a name="[13f]"></a>_fx_directory_name_extract</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, fx_directory_name_extract.o(.text._fx_directory_name_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fx_directory_name_extract
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
</UL>

<P><STRONG><a name="[13d]"></a>_fx_directory_search</STRONG> (Thumb, 2488 bytes, Stack size 192 bytes, fx_directory_search.o(.text._fx_directory_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_name_extract
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
</UL>

<P><STRONG><a name="[140]"></a>_fx_file_close</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, fx_file_close.o(.text._fx_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _fx_file_close &rArr; _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_close
</UL>

<P><STRONG><a name="[143]"></a>_fx_file_create</STRONG> (Thumb, 314 bytes, Stack size 256 bytes, fx_file_create.o(.text._fx_file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = _fx_file_create &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_name_extract
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_create
</UL>

<P><STRONG><a name="[144]"></a>_fx_file_open</STRONG> (Thumb, 1028 bytes, Stack size 72 bytes, fx_file_open.o(.text._fx_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _fx_file_open &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
</UL>

<P><STRONG><a name="[145]"></a>_fx_file_write</STRONG> (Thumb, 1644 bytes, Stack size 72 bytes, fx_file_write.o(.text._fx_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _fx_file_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_write
</UL>

<P><STRONG><a name="[147]"></a>_fx_media_boot_info_extract</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, fx_media_boot_info_extract.o(.text._fx_media_boot_info_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fx_media_boot_info_extract
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[148]"></a>_fx_media_flush</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, fx_media_flush.o(.text._fx_media_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _fx_media_flush &rArr; _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_flush
</UL>

<P><STRONG><a name="[14b]"></a>_fx_media_open</STRONG> (Thumb, 1568 bytes, Stack size 56 bytes, fx_media_open.o(.text._fx_media_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _fx_media_open &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
</UL>

<P><STRONG><a name="[a0]"></a>_fx_partition_offset_calculate</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, fx_partition_offset_calculate.o(.text._fx_partition_offset_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fx_partition_offset_calculate &rArr; _fx_utility_partition_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_partition_get
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F429_SD_SDIO_driver
</UL>

<P><STRONG><a name="[114]"></a>_fx_system_initialize</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fx_system_initialize.o(.text._fx_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _fx_system_initialize &rArr; _tx_timer_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[72]"></a>_fx_system_timer_entry</STRONG> (Thumb, 460 bytes, Stack size 28 bytes, fx_system_timer_entry.o(.text._fx_system_timer_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _fx_system_timer_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fx_system_initialize.o(.text._fx_system_initialize)
</UL>
<P><STRONG><a name="[134]"></a>_fx_utility_16_unsigned_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_16_unsigned_read.o(.text._fx_utility_16_unsigned_read))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[138]"></a>_fx_utility_16_unsigned_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_16_unsigned_write.o(.text._fx_utility_16_unsigned_write))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>

<P><STRONG><a name="[135]"></a>_fx_utility_32_unsigned_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_32_unsigned_read.o(.text._fx_utility_32_unsigned_read))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_boot_info_extract
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[139]"></a>_fx_utility_32_unsigned_write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fx_utility_32_unsigned_write.o(.text._fx_utility_32_unsigned_write))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>

<P><STRONG><a name="[132]"></a>_fx_utility_FAT_entry_read</STRONG> (Thumb, 656 bytes, Stack size 72 bytes, fx_utility_fat_entry_read.o(.text._fx_utility_FAT_entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_read
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_read
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_search
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[13b]"></a>_fx_utility_FAT_entry_write</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, fx_utility_fat_entry_write.o(.text._fx_utility_FAT_entry_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _fx_utility_FAT_entry_write &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
</UL>

<P><STRONG><a name="[149]"></a>_fx_utility_FAT_flush</STRONG> (Thumb, 1144 bytes, Stack size 72 bytes, fx_utility_fat_flush.o(.text._fx_utility_FAT_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_32_unsigned_write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_16_unsigned_write
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_write
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>

<P><STRONG><a name="[14a]"></a>_fx_utility_FAT_map_flush</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, fx_utility_fat_map_flush.o(.text._fx_utility_FAT_map_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fx_utility_FAT_map_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>

<P><STRONG><a name="[152]"></a>_fx_utility_logical_sector_cache_entry_read</STRONG> (Thumb, 822 bytes, Stack size 44 bytes, fx_utility_logical_sector_cache_entry_read.o(.text._fx_utility_logical_sector_cache_entry_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _fx_utility_logical_sector_cache_entry_read
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
</UL>

<P><STRONG><a name="[13c]"></a>_fx_utility_logical_sector_flush</STRONG> (Thumb, 2670 bytes, Stack size 104 bytes, fx_utility_logical_sector_flush.o(.text._fx_utility_logical_sector_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fx_utility_logical_sector_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[133]"></a>_fx_utility_logical_sector_read</STRONG> (Thumb, 772 bytes, Stack size 56 bytes, fx_utility_logical_sector_read.o(.text._fx_utility_logical_sector_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_memory_copy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_cache_entry_read
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_entry_read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>

<P><STRONG><a name="[137]"></a>_fx_utility_logical_sector_write</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, fx_utility_logical_sector_write.o(.text._fx_utility_logical_sector_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _fx_utility_logical_sector_write &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_free_search
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_directory_entry_write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_map_flush
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_FAT_flush
</UL>

<P><STRONG><a name="[146]"></a>_fx_utility_memory_copy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fx_utility_memory_copy.o(.text._fx_utility_memory_copy))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_utility_logical_sector_read
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
</UL>

<P><STRONG><a name="[14f]"></a>_fx_utility_partition_get</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, fx_partition_offset_calculate.o(.text._fx_utility_partition_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fx_utility_partition_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_partition_offset_calculate
</UL>

<P><STRONG><a name="[119]"></a>_fxe_file_close</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fxe_file_close.o(.text._fxe_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _fxe_file_close &rArr; _fx_file_close &rArr; _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[116]"></a>_fxe_file_create</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fxe_file_create.o(.text._fxe_file_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = _fxe_file_create &rArr; _fx_file_create &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[117]"></a>_fxe_file_open</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, fxe_file_open.o(.text._fxe_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = _fxe_file_open &rArr; _fx_file_open &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[118]"></a>_fxe_file_write</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fxe_file_write.o(.text._fxe_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _fxe_file_write &rArr; _fx_file_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[11a]"></a>_fxe_media_flush</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fxe_media_flush.o(.text._fxe_media_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = _fxe_media_flush &rArr; _fx_media_flush &rArr; _fx_directory_entry_write &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[115]"></a>_fxe_media_open</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, fxe_media_open.o(.text._fxe_media_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fxe_media_open &rArr; _fx_media_open &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
</UL>

<P><STRONG><a name="[155]"></a>_tx_block_allocate</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, tx_block_allocate.o(.text._tx_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_block_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
</UL>

<P><STRONG><a name="[73]"></a>_tx_block_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_block_pool_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_block_allocate.o(.text._tx_block_allocate)
<LI> tx_block_pool_cleanup.o(.text._tx_block_pool_cleanup)
</UL>
<P><STRONG><a name="[158]"></a>_tx_block_pool_create</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, tx_block_pool_create.o(.text._tx_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
</UL>

<P><STRONG><a name="[159]"></a>_tx_block_release</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tx_block_release.o(.text._tx_block_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_block_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_release
</UL>

<P><STRONG><a name="[15a]"></a>_tx_byte_allocate</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[74]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_byte_pool_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_byte_allocate.o(.text._tx_byte_allocate)
<LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[15c]"></a>_tx_byte_pool_create</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _tx_byte_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[15b]"></a>_tx_byte_pool_search</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[15d]"></a>_tx_byte_release</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, tx_byte_release.o(.text._tx_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_byte_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
</UL>

<P><STRONG><a name="[15f]"></a>_tx_initialize_high_level</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[10a]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
</UL>

<P><STRONG><a name="[75]"></a>_tx_mutex_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_mutex_cleanup.o(.text._tx_mutex_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_mutex_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_mutex_get.o(.text._tx_mutex_get)
<LI> tx_mutex_cleanup.o(.text._tx_mutex_cleanup)
</UL>
<P><STRONG><a name="[14e]"></a>_tx_mutex_create</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tx_mutex_create.o(.text._tx_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_mutex_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_open
</UL>

<P><STRONG><a name="[141]"></a>_tx_mutex_get</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, tx_mutex_get.o(.text._tx_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>

<P><STRONG><a name="[166]"></a>_tx_mutex_prioritize</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tx_mutex_prioritize.o(.text._tx_mutex_prioritize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_mutex_prioritize
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>

<P><STRONG><a name="[165]"></a>_tx_mutex_priority_change</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tx_mutex_priority_change.o(.text._tx_mutex_priority_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>

<P><STRONG><a name="[142]"></a>_tx_mutex_put</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, tx_mutex_put.o(.text._tx_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_thread_release
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_close
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_create
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_file_write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_media_flush
</UL>

<P><STRONG><a name="[76]"></a>_tx_mutex_thread_release</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tx_mutex_cleanup.o(.text._tx_mutex_thread_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _tx_mutex_thread_release &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_mutex_create.o(.text._tx_mutex_create)
</UL>
<P><STRONG><a name="[77]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
<LI> tx_semaphore_get.o(.text._tx_semaphore_get)
</UL>
<P><STRONG><a name="[175]"></a>_tx_semaphore_create</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[167]"></a>_tx_semaphore_delete</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tx_semaphore_delete.o(.text._tx_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_semaphore_delete &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_delete
</UL>

<P><STRONG><a name="[168]"></a>_tx_semaphore_get</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[169]"></a>_tx_semaphore_put</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[16a]"></a>_tx_thread_create</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
</UL>

<P><STRONG><a name="[17a]"></a>_tx_thread_delete</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tx_thread_delete.o(.text._tx_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_delete
</UL>

<P><STRONG><a name="[153]"></a>_tx_thread_identify</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_thread_identify.o(.text._tx_thread_identify))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>

<P><STRONG><a name="[17c]"></a>_tx_thread_info_get</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tx_thread_info_get.o(.text._tx_thread_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_info_get
</UL>

<P><STRONG><a name="[160]"></a>_tx_thread_initialize</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_thread_initialize &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[154]"></a>_tx_thread_preemption_change</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_thread_preemption_change.o(.text._tx_thread_preemption_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_preemption_change
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
</UL>

<P><STRONG><a name="[17e]"></a>_tx_thread_relinquish</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, tx_thread_relinquish.o(.text._tx_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_relinquish
</UL>

<P><STRONG><a name="[16c]"></a>_tx_thread_resume</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tx_thread_resume.o(.text._tx_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_resume
</UL>

<P><STRONG><a name="[79]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[107]"></a>_tx_thread_sleep</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTASK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTASK
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTASK
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
</UL>

<P><STRONG><a name="[16d]"></a>_tx_thread_suspend</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tx_thread_suspend.o(.text._tx_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_suspend &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_suspend
</UL>

<P><STRONG><a name="[15e]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_prioritize
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_preemption_change
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[157]"></a>_tx_thread_system_resume</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_cleanup
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_release
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_cleanup
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
</UL>

<P><STRONG><a name="[156]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_allocate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_priority_change
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_suspend
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[170]"></a>_tx_thread_terminate</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, tx_thread_terminate.o(.text._tx_thread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_thread_terminate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_terminate
</UL>

<P><STRONG><a name="[94]"></a>_tx_thread_time_slice</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[78]"></a>_tx_thread_timeout</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[150]"></a>_tx_timer_create</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tx_timer_create.o(.text._tx_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _tx_timer_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_system_initialize
</UL>

<P><STRONG><a name="[93]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_timer_expiration_process &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[161]"></a>_tx_timer_initialize</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[16f]"></a>_tx_timer_system_activate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_create
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_thread_entry
</UL>

<P><STRONG><a name="[16e]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
</UL>

<P><STRONG><a name="[7a]"></a>_tx_timer_thread_entry</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, tx_timer_thread_entry.o(.text._tx_timer_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_timer_thread_entry &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_timer_initialize.o(.text._tx_timer_initialize)
</UL>
<P><STRONG><a name="[10e]"></a>_txe_block_allocate</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, txe_block_allocate.o(.text._txe_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_block_allocate &rArr; _tx_block_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfDec
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[121]"></a>_txe_block_pool_create</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, txe_block_pool_create.o(.text._txe_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _txe_block_pool_create &rArr; _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[124]"></a>_txe_block_release</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, txe_block_release.o(.text._txe_block_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_block_release &rArr; _tx_block_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_block_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[10c]"></a>_txe_byte_allocate</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_byte_pool_search
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfDec
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
</UL>

<P><STRONG><a name="[122]"></a>_txe_byte_pool_create</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_byte_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[123]"></a>_txe_byte_release</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, txe_byte_release.o(.text._txe_byte_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _txe_byte_release &rArr; _tx_byte_release &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_release
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTASK
</UL>

<P><STRONG><a name="[171]"></a>_txe_mutex_create</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, txe_mutex_create.o(.text._txe_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _txe_mutex_create &rArr; _tx_mutex_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
</UL>

<P><STRONG><a name="[172]"></a>_txe_mutex_get</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, txe_mutex_get.o(.text._txe_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
</UL>

<P><STRONG><a name="[173]"></a>_txe_mutex_put</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, txe_mutex_put.o(.text._txe_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
</UL>

<P><STRONG><a name="[174]"></a>_txe_semaphore_create</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_semaphore_create &rArr; _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
</UL>

<P><STRONG><a name="[176]"></a>_txe_semaphore_delete</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, txe_semaphore_delete.o(.text._txe_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
</UL>

<P><STRONG><a name="[177]"></a>_txe_semaphore_get</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>

<P><STRONG><a name="[178]"></a>_txe_semaphore_put</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>

<P><STRONG><a name="[105]"></a>_txe_thread_create</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTaskCreate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1TaskCreate
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTaskCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTaskCreate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDLETaskCreate
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
</UL>

<P><STRONG><a name="[179]"></a>_txe_thread_delete</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, txe_thread_delete.o(.text._txe_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _txe_thread_delete &rArr; _tx_thread_delete
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
</UL>

<P><STRONG><a name="[17b]"></a>_txe_thread_info_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, txe_thread_info_get.o(.text._txe_thread_info_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _txe_thread_info_get &rArr; _tx_thread_info_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>

<P><STRONG><a name="[17d]"></a>_txe_thread_relinquish</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, txe_thread_relinquish.o(.text._txe_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _txe_thread_relinquish &rArr; _tx_thread_relinquish
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_relinquish
</UL>

<P><STRONG><a name="[17f]"></a>_txe_thread_resume</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_thread_resume.o(.text._txe_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _txe_thread_resume &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_resume
</UL>

<P><STRONG><a name="[180]"></a>_txe_thread_suspend</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_thread_suspend.o(.text._txe_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _txe_thread_suspend &rArr; _tx_thread_suspend &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_suspend
</UL>

<P><STRONG><a name="[181]"></a>_txe_thread_terminate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, txe_thread_terminate.o(.text._txe_thread_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_thread_terminate &rArr; _tx_thread_terminate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
</UL>

<P><STRONG><a name="[182]"></a>_ux_dcd_stm32_endpoint_create</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ux_dcd_stm32_endpoint_create.o(.text._ux_dcd_stm32_endpoint_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_dcd_stm32_endpoint_create &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[183]"></a>_ux_dcd_stm32_endpoint_destroy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ux_dcd_stm32_endpoint_destroy.o(.text._ux_dcd_stm32_endpoint_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_dcd_stm32_endpoint_destroy &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[184]"></a>_ux_dcd_stm32_endpoint_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ux_dcd_stm32_endpoint_reset.o(.text._ux_dcd_stm32_endpoint_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_dcd_stm32_endpoint_reset &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[185]"></a>_ux_dcd_stm32_endpoint_stall</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ux_dcd_stm32_endpoint_stall.o(.text._ux_dcd_stm32_endpoint_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_dcd_stm32_endpoint_stall &rArr; HAL_PCD_EP_SetStall
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[189]"></a>_ux_dcd_stm32_endpoint_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ux_dcd_stm32_endpoint_status.o(.text._ux_dcd_stm32_endpoint_status))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[186]"></a>_ux_dcd_stm32_frame_number_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_dcd_stm32_frame_number_get.o(.text._ux_dcd_stm32_frame_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[7b]"></a>_ux_dcd_stm32_function</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ux_dcd_stm32_function.o(.text._ux_dcd_stm32_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ux_dcd_stm32_function &rArr; _ux_dcd_stm32_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Stop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_reset
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_destroy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_create
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_stall
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_frame_number_get
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_endpoint_status
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_transfer_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_dcd_stm32_initialize.o(.text._ux_dcd_stm32_initialize)
</UL>
<P><STRONG><a name="[130]"></a>_ux_dcd_stm32_initialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ux_dcd_stm32_initialize.o(.text._ux_dcd_stm32_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _ux_dcd_stm32_initialize &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[188]"></a>_ux_dcd_stm32_transfer_request</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ux_dcd_stm32_transfer_request.o(.text._ux_dcd_stm32_transfer_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ux_dcd_stm32_transfer_request &rArr; _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[18c]"></a>_ux_device_class_storage_activate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ux_device_class_storage_activate.o(.text._ux_device_class_storage_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ux_device_class_storage_activate &rArr; _ux_utility_thread_resume &rArr; _txe_thread_resume &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
</UL>

<P><STRONG><a name="[18e]"></a>_ux_device_class_storage_control_request</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ux_device_class_storage_control_request.o(.text._ux_device_class_storage_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_device_class_storage_control_request &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
</UL>

<P><STRONG><a name="[192]"></a>_ux_device_class_storage_csw_send</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ux_device_class_storage_csw_send.o(.text._ux_device_class_storage_csw_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_csw_send &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_put
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_synchronize_cache
</UL>

<P><STRONG><a name="[195]"></a>_ux_device_class_storage_deactivate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ux_device_class_storage_deactivate.o(.text._ux_device_class_storage_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_device_class_storage_deactivate &rArr; _ux_device_stack_transfer_all_request_abort &rArr; _ux_device_stack_transfer_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_all_request_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
</UL>

<P><STRONG><a name="[70]"></a>_ux_device_class_storage_entry</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ux_device_class_storage_entry.o(.text._ux_device_class_storage_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_entry &rArr; _ux_device_class_storage_initialize &rArr; _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_control_request
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_activate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_uninitialize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_initialize
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_deactivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_device.o(.text.USBTASK)
</UL>
<P><STRONG><a name="[199]"></a>_ux_device_class_storage_format</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ux_device_class_storage_format.o(.text._ux_device_class_storage_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_device_class_storage_format &rArr; _ux_device_stack_endpoint_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[197]"></a>_ux_device_class_storage_initialize</STRONG> (Thumb, 356 bytes, Stack size 64 bytes, ux_device_class_storage_initialize.o(.text._ux_device_class_storage_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_initialize &rArr; _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
</UL>

<P><STRONG><a name="[19e]"></a>_ux_device_class_storage_inquiry</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, ux_device_class_storage_inquiry.o(.text._ux_device_class_storage_inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_inquiry &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_put_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a1]"></a>_ux_device_class_storage_mode_select</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ux_device_class_storage_mode_select.o(.text._ux_device_class_storage_mode_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_device_class_storage_mode_select &rArr; _ux_device_stack_endpoint_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a2]"></a>_ux_device_class_storage_mode_sense</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, ux_device_class_storage_mode_sense.o(.text._ux_device_class_storage_mode_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_mode_sense &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get_big_endian
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_put_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1b0]"></a>_ux_device_class_storage_prevent_allow_media_removal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_device_class_storage_prevent_allow_media_removal.o(.text._ux_device_class_storage_prevent_allow_media_removal))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a4]"></a>_ux_device_class_storage_read</STRONG> (Thumb, 390 bytes, Stack size 96 bytes, ux_device_class_storage_read.o(.text._ux_device_class_storage_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _ux_device_class_storage_read &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get_big_endian
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a6]"></a>_ux_device_class_storage_read_capacity</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ux_device_class_storage_read_capacity.o(.text._ux_device_class_storage_read_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_read_capacity &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_put_big_endian
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a8]"></a>_ux_device_class_storage_read_format_capacity</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ux_device_class_storage_read_format_capacity.o(.text._ux_device_class_storage_read_format_capacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_read_format_capacity &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_put_big_endian
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a9]"></a>_ux_device_class_storage_request_sense</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ux_device_class_storage_request_sense.o(.text._ux_device_class_storage_request_sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_request_sense &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1af]"></a>_ux_device_class_storage_start_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_device_class_storage_start_stop.o(.text._ux_device_class_storage_start_stop))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1aa]"></a>_ux_device_class_storage_synchronize_cache</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, ux_device_class_storage_synchronize_cache.o(.text._ux_device_class_storage_synchronize_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_synchronize_cache &rArr; _ux_device_class_storage_csw_send &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get_big_endian
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_csw_send
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1ab]"></a>_ux_device_class_storage_test_ready</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ux_device_class_storage_test_ready.o(.text._ux_device_class_storage_test_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_device_class_storage_test_ready &rArr; _ux_device_stack_endpoint_stall
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[7c]"></a>_ux_device_class_storage_thread</STRONG> (Thumb, 800 bytes, Stack size 16 bytes, ux_device_class_storage_thread.o(.text._ux_device_class_storage_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ux_device_class_storage_thread &rArr; _ux_device_class_storage_read &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_format
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_csw_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_prevent_allow_media_removal
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_sense
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_select
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_format_capacity
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_capacity
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_start_stop
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_request_sense
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_suspend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_relinquish
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_write
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_verify
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_test_ready
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_synchronize_cache
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ux_device_class_storage_initialize.o(.text._ux_device_class_storage_initialize)
</UL>
<P><STRONG><a name="[198]"></a>_ux_device_class_storage_uninitialize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ux_device_class_storage_uninitialize.o(.text._ux_device_class_storage_uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ux_device_class_storage_uninitialize &rArr; _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_delete
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
</UL>

<P><STRONG><a name="[1b2]"></a>_ux_device_class_storage_verify</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ux_device_class_storage_verify.o(.text._ux_device_class_storage_verify))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1b1]"></a>_ux_device_class_storage_write</STRONG> (Thumb, 348 bytes, Stack size 72 bytes, ux_device_class_storage_write.o(.text._ux_device_class_storage_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _ux_device_class_storage_write &rArr; _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_short_get_big_endian
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_endpoint_stall
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_long_get_big_endian
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[12d]"></a>_ux_device_stack_class_register</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, ux_device_stack_class_register.o(.text._ux_device_stack_class_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ux_device_stack_class_register &rArr; _ux_utility_memory_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_copy
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[19a]"></a>_ux_device_stack_endpoint_stall</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ux_device_stack_endpoint_stall.o(.text._ux_device_stack_endpoint_stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_device_stack_endpoint_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_format
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_select
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_capacity
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_request_sense
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_write
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_test_ready
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_synchronize_cache
</UL>

<P><STRONG><a name="[12c]"></a>_ux_device_stack_initialize</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, ux_device_stack_initialize.o(.text._ux_device_stack_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ux_device_stack_initialize &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_delete
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_mulc_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[190]"></a>_ux_device_stack_transfer_abort</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ux_device_stack_transfer_abort.o(.text._ux_device_stack_transfer_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ux_device_stack_transfer_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_control_request
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_all_request_abort
</UL>

<P><STRONG><a name="[196]"></a>_ux_device_stack_transfer_all_request_abort</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ux_device_stack_transfer_all_request_abort.o(.text._ux_device_stack_transfer_all_request_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ux_device_stack_transfer_all_request_abort &rArr; _ux_device_stack_transfer_abort &rArr; _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_deactivate
</UL>

<P><STRONG><a name="[191]"></a>_ux_device_stack_transfer_request</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ux_device_stack_transfer_request.o(.text._ux_device_stack_transfer_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ux_device_stack_transfer_request &rArr; _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_control_request
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_csw_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_sense
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_format_capacity
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_capacity
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_request_sense
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_write
</UL>

<P><STRONG><a name="[187]"></a>_ux_system_error_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ux_system_error_handler.o(.text._ux_system_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_entry
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_thread_create
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_select
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_string_length_check
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_semaphore_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_function
</UL>

<P><STRONG><a name="[12b]"></a>_ux_system_initialize</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ux_system_initialize.o(.text._ux_system_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = _ux_system_initialize &rArr; _ux_utility_mutex_create &rArr; _txe_mutex_create &rArr; _tx_mutex_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTASK
</UL>

<P><STRONG><a name="[1ad]"></a>_ux_utility_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ux_utility_delay_ms.o(.text._ux_utility_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_utility_delay_ms &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_request
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1ae]"></a>_ux_utility_long_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_long_get.o(.text._ux_utility_long_get))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[1a5]"></a>_ux_utility_long_get_big_endian</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_utility_long_get_big_endian.o(.text._ux_utility_long_get_big_endian))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_synchronize_cache
</UL>

<P><STRONG><a name="[194]"></a>_ux_utility_long_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_long_put.o(.text._ux_utility_long_put))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_csw_send
</UL>

<P><STRONG><a name="[1a7]"></a>_ux_utility_long_put_big_endian</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_utility_long_put_big_endian.o(.text._ux_utility_long_put_big_endian))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_format_capacity
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_capacity
</UL>

<P><STRONG><a name="[18a]"></a>_ux_utility_memory_allocate</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, ux_utility_memory_allocate.o(.text._ux_utility_memory_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_set
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free_block_best_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_initialize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_initialize
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate_mulc_safe
</UL>

<P><STRONG><a name="[1b5]"></a>_ux_utility_memory_allocate_mulc_safe</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ux_utility_memory_allocate_mulc_safe.o(.text._ux_utility_memory_allocate_mulc_safe))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
</UL>

<P><STRONG><a name="[19f]"></a>_ux_utility_memory_copy</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ux_utility_memory_copy.o(.text._ux_utility_memory_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_utility_memory_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_class_register
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
</UL>

<P><STRONG><a name="[19c]"></a>_ux_utility_memory_free</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, ux_utility_memory_free.o(.text._ux_utility_memory_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _ux_utility_memory_free &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_on
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_mutex_off
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_uninitialize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_initialize
</UL>

<P><STRONG><a name="[1bb]"></a>_ux_utility_memory_free_block_best_get</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, ux_utility_memory_free_block_best_get.o(.text._ux_utility_memory_free_block_best_get))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>

<P><STRONG><a name="[193]"></a>_ux_utility_memory_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ux_utility_memory_set.o(.text._ux_utility_memory_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _ux_utility_memory_set
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_csw_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_sense
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_format_capacity
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read_capacity
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_request_sense
</UL>

<P><STRONG><a name="[1b9]"></a>_ux_utility_mutex_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ux_utility_mutex_create.o(.text._ux_utility_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _ux_utility_mutex_create &rArr; _txe_mutex_create &rArr; _tx_mutex_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
</UL>

<P><STRONG><a name="[1bc]"></a>_ux_utility_mutex_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_mutex_off.o(.text._ux_utility_mutex_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _ux_utility_mutex_off &rArr; _txe_mutex_put &rArr; _tx_mutex_put &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>

<P><STRONG><a name="[1ba]"></a>_ux_utility_mutex_on</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ux_utility_mutex_on.o(.text._ux_utility_mutex_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_mutex_get
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_utility_memory_allocate
</UL>

<P><STRONG><a name="[1b6]"></a>_ux_utility_semaphore_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ux_utility_semaphore_create.o(.text._ux_utility_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_utility_semaphore_create &rArr; _txe_semaphore_create &rArr; _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
</UL>

<P><STRONG><a name="[1b7]"></a>_ux_utility_semaphore_delete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_semaphore_delete.o(.text._ux_utility_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ux_utility_semaphore_delete &rArr; _txe_semaphore_delete &rArr; _tx_semaphore_delete &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
</UL>

<P><STRONG><a name="[18b]"></a>_ux_utility_semaphore_get</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, ux_utility_semaphore_get.o(.text._ux_utility_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _ux_utility_semaphore_get &rArr; _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_identify
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_transfer_request
</UL>

<P><STRONG><a name="[1b8]"></a>_ux_utility_semaphore_put</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_semaphore_put.o(.text._ux_utility_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _ux_utility_semaphore_put &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_transfer_abort
</UL>

<P><STRONG><a name="[18f]"></a>_ux_utility_short_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_short_get.o(.text._ux_utility_short_get))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_control_request
</UL>

<P><STRONG><a name="[1a3]"></a>_ux_utility_short_get_big_endian</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ux_utility_short_get_big_endian.o(.text._ux_utility_short_get_big_endian))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_sense
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_write
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_synchronize_cache
</UL>

<P><STRONG><a name="[1a0]"></a>_ux_utility_short_put_big_endian</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ux_utility_short_put_big_endian.o(.text._ux_utility_short_put_big_endian))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_inquiry
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_mode_sense
</UL>

<P><STRONG><a name="[1b4]"></a>_ux_utility_string_length_check</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ux_utility_string_length_check.o(.text._ux_utility_string_length_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ux_utility_string_length_check &rArr; _ux_system_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_class_register
</UL>

<P><STRONG><a name="[19b]"></a>_ux_utility_thread_create</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, ux_utility_thread_create.o(.text._ux_utility_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = _ux_utility_thread_create &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_initialize
</UL>

<P><STRONG><a name="[19d]"></a>_ux_utility_thread_delete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ux_utility_thread_delete.o(.text._ux_utility_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_utility_thread_delete &rArr; _txe_thread_terminate &rArr; _tx_thread_terminate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_delete
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_uninitialize
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_initialize
</UL>

<P><STRONG><a name="[1b3]"></a>_ux_utility_thread_relinquish</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_thread_relinquish.o(.text._ux_utility_thread_relinquish))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ux_utility_thread_relinquish &rArr; _txe_thread_relinquish &rArr; _tx_thread_relinquish
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_relinquish
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[18d]"></a>_ux_utility_thread_resume</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_thread_resume.o(.text._ux_utility_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _ux_utility_thread_resume &rArr; _txe_thread_resume &rArr; _tx_thread_resume &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_activate
</UL>

<P><STRONG><a name="[1ac]"></a>_ux_utility_thread_suspend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_utility_thread_suspend.o(.text._ux_utility_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ux_utility_thread_suspend &rArr; _txe_thread_suspend &rArr; _tx_thread_suspend &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_class_storage_thread
</UL>

<P><STRONG><a name="[6d]"></a>app_usb_device_thread_media_read</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ux_device_msc.o(.text.app_usb_device_thread_media_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_usb_device_thread_media_read &rArr; HAL_SD_ReadBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_device.o(.text.USBTASK)
</UL>
<P><STRONG><a name="[6f]"></a>app_usb_device_thread_media_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ux_device_msc.o(.text.app_usb_device_thread_media_status))
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_device.o(.text.USBTASK)
</UL>
<P><STRONG><a name="[6e]"></a>app_usb_device_thread_media_write</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ux_device_msc.o(.text.app_usb_device_thread_media_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_usb_device_thread_media_write &rArr; HAL_SD_WriteBlocks &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_device.o(.text.USBTASK)
</UL>
<P><STRONG><a name="[87]"></a>main</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[163]"></a>tx_application_define</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_azure_rtos.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tx_application_define &rArr; SYSTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[81]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f3]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f4]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[68]"></a>LEDTASK</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ledtask.o(.text.LEDTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LEDTASK &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ledtask.o(.text.LEDTaskCreate)
</UL>
<P><STRONG><a name="[67]"></a>IDLETASK</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text.IDLETASK))
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text.IDLETaskCreate)
</UL>
<P><STRONG><a name="[6b]"></a>SYSTASK</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, systask.o(.text.SYSTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = SYSTASK &rArr; USBTaskCreate &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBTaskCreate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1TaskCreate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDTaskCreate
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfHex
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDLETaskCreate
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDTaskCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systask.o(.text.SYSTaskCreate)
</UL>
<P><STRONG><a name="[6c]"></a>UARTTASK</STRONG> (Thumb, 184 bytes, Stack size 520 bytes, uart.o(.text.UARTTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = UARTTASK &rArr; _txe_block_pool_create &rArr; _tx_block_pool_create &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_release
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_release
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_pool_create
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_block_allocate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text.UART1TaskCreate)
</UL>
<P><STRONG><a name="[112]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 360 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp1))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[d2]"></a>SD_FindSCR</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_FindSCR &rArr; SDIO_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[66]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[fb]"></a>UART_Receive_IT</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, stm32f4xx_hal_uart.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>UART_SetConfig</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6a]"></a>SDTASK</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, sdtask.o(.text.SDTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = SDTASK &rArr; _fxe_file_create &rArr; _fx_file_create &rArr; _fx_directory_search &rArr; _fx_directory_entry_read &rArr; _fx_utility_FAT_entry_read &rArr; _fx_utility_FAT_flush &rArr; _fx_utility_logical_sector_read &rArr; _fx_utility_logical_sector_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintfDec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Printf
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Check
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_open
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_media_flush
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_open
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_create
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fxe_file_close
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fx_system_initialize
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdtask.o(.text.SDTaskCreate)
</UL>
<P><STRONG><a name="[128]"></a>USBD_Device_Framework_Builder</STRONG> (Thumb, 732 bytes, Stack size 52 bytes, ux_device_descriptors.o(.text.USBD_Device_Framework_Builder))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_Device_Framework_Builder
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_Device_Framework_Speed
</UL>

<P><STRONG><a name="[71]"></a>USBTASK</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, app_usbx_device.o(.text.USBTASK))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = USBTASK &rArr; _ux_device_stack_initialize &rArr; _ux_utility_memory_allocate_mulc_safe &rArr; _ux_utility_memory_allocate &rArr; _ux_utility_mutex_on &rArr; _txe_mutex_get &rArr; _tx_mutex_get &rArr; _tx_mutex_priority_change &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_system_initialize
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_initialize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_device_stack_class_register
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ux_dcd_stm32_initialize
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_String_Framework
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_Language_Id_Framework
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_Device_Framework_Speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_usbx_device.o(.text.USBTaskCreate)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
